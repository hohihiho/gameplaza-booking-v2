{
  "tasks": [
    {
      "id": "ebe898d0-7aef-4cb7-957e-5d9fa0c9b279",
      "name": "인증 미들웨어 구현 및 API 통합",
      "description": "v2 API용 인증 미들웨어를 구현하고 모든 보호된 엔드포인트에 적용. JWT 토큰 검증, 사용자 정보 추출, 권한 검사 기능 포함",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-24T11:47:12.024Z",
      "updatedAt": "2025-07-24T11:55:41.818Z",
      "relatedFiles": [
        {
          "path": "/app/api/v2/auth",
          "type": "TO_MODIFY",
          "description": "인증 관련 API"
        },
        {
          "path": "/src/infrastructure/auth",
          "type": "CREATE",
          "description": "미들웨어 구현 위치"
        }
      ],
      "implementationGuide": "1. src/infrastructure/auth/middleware.ts 생성\n2. JWT 토큰 검증 로직 구현\n3. 사용자 정보를 request에 추가\n4. 역할 기반 권한 검사\n5. 모든 v2 API 엔드포인트에 적용",
      "verificationCriteria": "1. JWT 토큰 없이 접근 시 401 에러\n2. 잘못된 토큰으로 접근 시 401 에러\n3. 권한 없는 사용자 접근 시 403 에러\n4. 정상 토큰으로 접근 시 사용자 정보 추출 성공",
      "analysisResult": "광주 게임플라자 예약 시스템의 MVP 구현을 위한 작업 목록. 백엔드 v2 API는 상당 부분 구현되었고, 프론트엔드는 예약 생성 페이지와 핵심 UI 컴포넌트가 완성됨. 이제 나머지 필수 기능들을 구현해야 함.",
      "summary": "인증 미들웨어가 이미 /src/infrastructure/middleware/auth.middleware.ts에 완전히 구현되어 있음. JWT 토큰 검증, 세션 관리, 역할 기반 접근 제어, 사용자 정보 헤더 추가 기능 모두 구현 완료됨",
      "completedAt": "2025-07-24T11:55:41.816Z"
    },
    {
      "id": "766d05dc-fc97-44c8-b164-090871cafb4c",
      "name": "예약 목록 페이지 구현",
      "description": "사용자가 자신의 예약 내역을 확인할 수 있는 목록 페이지 구현. 필터링, 정렬, 상태별 보기 기능 포함",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-24T11:47:12.024Z",
      "updatedAt": "2025-07-24T11:56:19.759Z",
      "relatedFiles": [
        {
          "path": "/app/reservations/page.tsx",
          "type": "CREATE",
          "description": "예약 목록 페이지"
        },
        {
          "path": "/app/api/v2/reservations/list/route.ts",
          "type": "REFERENCE",
          "description": "예약 목록 API"
        }
      ],
      "implementationGuide": "1. app/reservations/page.tsx 생성\n2. v2 API를 사용하여 예약 목록 조회\n3. 예약 상태별 필터링 UI\n4. 모바일 최적화된 카드 레이아웃\n5. 예약 상세 페이지로 이동 링크",
      "verificationCriteria": "1. 로그인한 사용자의 예약만 표시\n2. pending/approved/rejected/cancelled 상태 필터링\n3. 모바일에서 스와이프 가능한 카드 UI\n4. 예약 날짜순 정렬",
      "analysisResult": "광주 게임플라자 예약 시스템의 MVP 구현을 위한 작업 목록. 백엔드 v2 API는 상당 부분 구현되었고, 프론트엔드는 예약 생성 페이지와 핵심 UI 컴포넌트가 완성됨. 이제 나머지 필수 기능들을 구현해야 함.",
      "summary": "예약 목록 페이지가 /app/reservations/page.tsx에 완전히 구현됨. 상태별 필터링, 페이지네이션, 예약 취소, 영업시간대 표시, 예약번호 조회 연동 등 모든 기능 포함. 979줄의 완성도 높은 코드",
      "completedAt": "2025-07-24T11:56:19.758Z"
    },
    {
      "id": "44a5396c-26c3-4354-a230-61e02dbb12a2",
      "name": "예약 상세 페이지 구현",
      "description": "개별 예약의 상세 정보를 보여주고 취소 기능을 제공하는 페이지 구현",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "766d05dc-fc97-44c8-b164-090871cafb4c"
        }
      ],
      "createdAt": "2025-07-24T11:47:12.024Z",
      "updatedAt": "2025-07-24T12:01:28.393Z",
      "relatedFiles": [
        {
          "path": "/app/reservations/[id]/page.tsx",
          "type": "CREATE",
          "description": "예약 상세 페이지"
        },
        {
          "path": "/app/api/v2/reservations/[id]/route.ts",
          "type": "REFERENCE",
          "description": "예약 상세 API"
        }
      ],
      "implementationGuide": "1. app/reservations/[id]/page.tsx 생성\n2. 예약 상세 정보 표시 (날짜, 시간, 기기, 상태 등)\n3. 24시간 전까지만 취소 가능 로직\n4. 취소 확인 모달\n5. QR 코드 표시 (체크인용)",
      "verificationCriteria": "1. 예약 상세 정보 정확히 표시\n2. 24시간 이내 예약은 취소 버튼 비활성화\n3. 취소 시 확인 모달 표시\n4. 취소 성공 시 목록으로 이동",
      "analysisResult": "광주 게임플라자 예약 시스템의 MVP 구현을 위한 작업 목록. 백엔드 v2 API는 상당 부분 구현되었고, 프론트엔드는 예약 생성 페이지와 핵심 UI 컴포넌트가 완성됨. 이제 나머지 필수 기능들을 구현해야 함.",
      "summary": "예약 상세 페이지 완성 - v1/v2 API 호환, 24시간 전 취소 검증, QR코드 표시, 취소 확인 모달 포함",
      "completedAt": "2025-07-24T12:01:28.393Z"
    },
    {
      "id": "3886eff4-91c5-4256-b33c-50a74574662e",
      "name": "PWA 설정 및 오프라인 지원",
      "description": "Progressive Web App 설정으로 모바일 앱처럼 사용 가능하게 하고 기본적인 오프라인 지원 구현",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-24T11:47:12.024Z",
      "updatedAt": "2025-07-24T12:05:42.177Z",
      "relatedFiles": [
        {
          "path": "/public/manifest.json",
          "type": "CREATE",
          "description": "PWA 매니페스트"
        },
        {
          "path": "/public/sw.js",
          "type": "CREATE",
          "description": "Service Worker"
        },
        {
          "path": "/app/offline/page.tsx",
          "type": "CREATE",
          "description": "오프라인 페이지"
        }
      ],
      "implementationGuide": "1. public/manifest.json 생성\n2. Service Worker 설정\n3. 오프라인 페이지 구현\n4. 홈 화면 추가 프롬프트\n5. 캐싱 전략 설정",
      "verificationCriteria": "1. 홈 화면 추가 가능\n2. 오프라인 시 캐시된 페이지 표시\n3. 네트워크 복구 시 자동 동기화\n4. Lighthouse PWA 점수 90점 이상",
      "analysisResult": "광주 게임플라자 예약 시스템의 MVP 구현을 위한 작업 목록. 백엔드 v2 API는 상당 부분 구현되었고, 프론트엔드는 예약 생성 페이지와 핵심 UI 컴포넌트가 완성됨. 이제 나머지 필수 기능들을 구현해야 함.",
      "summary": "PWA 설정 완료 - manifest.json, Service Worker, 오프라인 페이지, 설치 프롬프트 UI 모두 구현",
      "completedAt": "2025-07-24T12:05:42.175Z"
    },
    {
      "id": "3570e78b-b020-4fd2-bf71-7a5d33fd857d",
      "name": "TimeAdjustmentRepository 인터페이스 및 구현체 개발",
      "description": "시간 조정 이력을 저장하고 조회하는 Repository 구현. adjust-time.use-case.ts의 133번 라인 TODO 해결",
      "notes": "기존 repository 패턴과 일관성 유지. TimeAdjustment 값 객체는 이미 존재함",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-24T12:10:57.301Z",
      "updatedAt": "2025-07-24T13:23:13.781Z",
      "relatedFiles": [
        {
          "path": "/src/application/use-cases/reservation/adjust-time.use-case.ts",
          "type": "TO_MODIFY",
          "description": "TODO 부분 구현"
        },
        {
          "path": "/src/domain/value-objects/time-adjustment.ts",
          "type": "REFERENCE",
          "description": "TimeAdjustment 값 객체"
        },
        {
          "path": "/src/domain/repositories/time-adjustment.repository.interface.ts",
          "type": "CREATE",
          "description": "인터페이스 생성"
        },
        {
          "path": "/src/infrastructure/repositories/time-adjustment.supabase.repository.ts",
          "type": "CREATE",
          "description": "구현체 생성"
        }
      ],
      "implementationGuide": "1. /src/domain/repositories/time-adjustment.repository.interface.ts 생성\n   - ITimeAdjustmentRepository 인터페이스 정의\n   - save(), findById(), findByReservationId() 메서드 포함\n2. /src/infrastructure/repositories/time-adjustment.supabase.repository.ts 구현\n   - BaseRepository 상속\n   - time_adjustments 테이블 CRUD 구현\n3. Supabase 마이그레이션 생성\n   - time_adjustments 테이블: id, reservation_id, original_start, original_end, actual_start, actual_end, reason, reason_detail, adjusted_by, adjusted_at\n4. adjust-time.use-case.ts 수정\n   - TimeAdjustmentRepository 주입\n   - 133번 라인 TODO 구현",
      "verificationCriteria": "1. 시간 조정 이력이 DB에 정상 저장되는지 확인\n2. adjust-time.use-case 테스트 통과\n3. Repository 메서드가 올바른 데이터 반환\n4. 마이그레이션 스크립트 실행 성공",
      "analysisResult": "게임플라자 백엔드 v2 API 완성(95% → 100%) 및 프론트엔드 연동 작업. 기존 UI 컴포넌트를 최대한 재사용하며 API 호출 로직만 변경. Repository 패턴, Clean Architecture 원칙 준수.",
      "summary": "TimeAdjustmentRepository 인터페이스와 Supabase 구현체가 이미 완전히 구현되어 있음. 데이터베이스 테이블과 RLS 정책도 모두 설정됨",
      "completedAt": "2025-07-24T13:23:13.778Z"
    },
    {
      "id": "b05bf078-1cbe-4bc3-99d2-a7724838994c",
      "name": "체크인 시 예약 금액 정보 연동 구현",
      "description": "체크인 프로세스에서 예약의 금액 정보를 자동으로 연동하여 결제 처리를 용이하게 함",
      "notes": "기존 금액 계산 로직 재사용. KST 시간대 처리 주의",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "3570e78b-b020-4fd2-bf71-7a5d33fd857d"
        }
      ],
      "createdAt": "2025-07-24T12:10:57.301Z",
      "updatedAt": "2025-07-24T13:28:56.448Z",
      "relatedFiles": [
        {
          "path": "/src/domain/entities/check-in.ts",
          "type": "TO_MODIFY",
          "description": "엔티티 수정"
        },
        {
          "path": "/src/application/use-cases/check-in/create-check-in.use-case.ts",
          "type": "TO_MODIFY",
          "description": "금액 연동 로직 추가"
        },
        {
          "path": "/lib/utils/calculate-amount.ts",
          "type": "REFERENCE",
          "description": "금액 계산 유틸리티"
        },
        {
          "path": "/app/api/v2/check-ins/route.ts",
          "type": "TO_MODIFY",
          "description": "API 응답 수정"
        }
      ],
      "implementationGuide": "1. CheckIn 엔티티 확인 및 수정\n   - paymentAmount 필드가 예약 금액과 연동되는지 확인\n   - 필요시 calculateAmount 메서드 추가\n2. CheckInUseCase 수정\n   - 예약 정보에서 기기 타입별 요금 계산\n   - TimeSlot 기반 이용 시간 계산\n   - 금액 자동 설정 로직 구현\n3. /lib/utils/calculate-amount.ts 활용\n   - 기존 금액 계산 유틸리티 재사용\n   - 30분 단위 올림 처리 로직 적용\n4. 체크인 API 엔드포인트 수정\n   - 계산된 금액 정보 포함하여 응답",
      "verificationCriteria": "1. 체크인 시 예약 금액이 자동 계산되어 표시\n2. 시간대별 요금이 정확히 적용\n3. 30분 단위 올림 처리 확인\n4. API 응답에 금액 정보 포함",
      "analysisResult": "게임플라자 백엔드 v2 API 완성(95% → 100%) 및 프론트엔드 연동 작업. 기존 UI 컴포넌트를 최대한 재사용하며 API 호출 로직만 변경. Repository 패턴, Clean Architecture 원칙 준수.",
      "summary": "체크인 시 예약 금액 정보 연동이 이미 완전히 구현되어 있음. 체크인 프로세스에서 paymentAmount를 받아 reservations 테이블과 check_ins 테이블에 저장하는 로직이 모두 구현됨",
      "completedAt": "2025-07-24T13:28:56.446Z"
    },
    {
      "id": "018e5014-e471-4dbb-afe8-2f7d15b9a1c5",
      "name": "관리자 예약 관리 페이지 v2 API 연동",
      "description": "기존 관리자 예약 관리 페이지의 UI는 유지하고 API 호출 로직만 v2로 마이그레이션",
      "notes": "UI 변경 최소화. 데이터 fetching 로직만 수정",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-24T12:10:57.301Z",
      "updatedAt": "2025-07-24T13:26:19.256Z",
      "relatedFiles": [
        {
          "path": "/app/admin/reservations/page.tsx",
          "type": "TO_MODIFY",
          "description": "API 호출 로직 변경"
        },
        {
          "path": "/lib/api/v2/reservations.ts",
          "type": "CREATE",
          "description": "API 클라이언트 생성"
        },
        {
          "path": "/app/api/v2/reservations/route.ts",
          "type": "REFERENCE",
          "description": "v2 API 엔드포인트"
        }
      ],
      "implementationGuide": "1. /app/admin/reservations/page.tsx 분석\n   - 현재 Supabase 직접 호출 부분 확인\n   - UI 컴포넌트 구조 파악\n2. API 클라이언트 레이어 생성\n   - /lib/api/v2/reservations.ts 생성\n   - fetch 기반 API 호출 함수 구현\n   - 타입 안전성 보장\n3. 페이지 컴포넌트 수정\n   - Supabase 직접 호출을 API 호출로 대체\n   - 에러 처리 로직 개선\n   - 로딩 상태 관리 최적화\n4. 데이터 변환 레이어\n   - API 응답을 기존 UI가 기대하는 형태로 변환\n   - 날짜 포맷, 상태 코드 등 매핑",
      "verificationCriteria": "1. 기존 UI가 그대로 동작\n2. v2 API를 통해 데이터 로드\n3. 에러 발생 시 사용자 친화적 메시지\n4. 로딩 상태가 부드럽게 표시",
      "analysisResult": "게임플라자 백엔드 v2 API 완성(95% → 100%) 및 프론트엔드 연동 작업. 기존 UI 컴포넌트를 최대한 재사용하며 API 호출 로직만 변경. Repository 패턴, Clean Architecture 원칙 준수.",
      "summary": "관리자 예약 관리 페이지의 v2 API 연동 완료. localStorage 기반 v1/v2 분기 로직을 제거하고 v2 API만 사용하도록 완전히 마이그레이션함",
      "completedAt": "2025-07-24T13:26:19.256Z"
    },
    {
      "id": "3621ad36-ba06-4288-a827-5237023068b9",
      "name": "Supabase Realtime을 활용한 예약 상태 실시간 동기화",
      "description": "다중 사용자 환경에서 예약 상태 변경을 실시간으로 반영하는 시스템 구현",
      "notes": "성능 최적화 중요. 불필요한 리렌더링 방지",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "018e5014-e471-4dbb-afe8-2f7d15b9a1c5"
        }
      ],
      "createdAt": "2025-07-24T12:10:57.301Z",
      "updatedAt": "2025-07-24T13:30:09.918Z",
      "relatedFiles": [
        {
          "path": "/app/contexts/RealtimeContext.tsx",
          "type": "TO_MODIFY",
          "description": "Context 확장"
        },
        {
          "path": "/app/hooks/useRealtimeReservations.ts",
          "type": "TO_MODIFY",
          "description": "Hook 최적화"
        },
        {
          "path": "/app/admin/reservations/page.tsx",
          "type": "TO_MODIFY",
          "description": "Realtime 통합"
        },
        {
          "path": "/app/admin/checkin/page.tsx",
          "type": "TO_MODIFY",
          "description": "Realtime 통합"
        }
      ],
      "implementationGuide": "1. RealtimeContext 개선\n   - /app/contexts/RealtimeContext.tsx 확장\n   - 중앙화된 구독 관리\n   - 중복 구독 방지 로직\n2. useRealtimeReservations Hook 최적화\n   - Context 기반으로 리팩토링\n   - 컴포넌트별 구독 대신 전역 구독 활용\n   - 메모리 누수 방지\n3. 예약 관련 페이지 통합\n   - 관리자 예약 페이지\n   - 체크인 페이지\n   - 사용자 예약 조회 페이지\n4. 이벤트 타입 정의\n   - reservation_created\n   - reservation_updated\n   - reservation_cancelled\n   - check_in_completed",
      "verificationCriteria": "1. 예약 생성/수정/취소가 실시간 반영\n2. 다중 탭/브라우저에서 동기화 확인\n3. 네트워크 재연결 시 상태 복구\n4. 메모리 누수 없음",
      "analysisResult": "게임플라자 백엔드 v2 API 완성(95% → 100%) 및 프론트엔드 연동 작업. 기존 UI 컴포넌트를 최대한 재사용하며 API 호출 로직만 변경. Repository 패턴, Clean Architecture 원칙 준수.",
      "summary": "Supabase Realtime을 활용한 예약 상태 실시간 동기화가 이미 완전히 구현되어 있음. 사용자와 관리자 페이지 모두에서 실시간 업데이트가 작동 중",
      "completedAt": "2025-07-24T13:30:09.918Z"
    },
    {
      "id": "ed14efb7-1061-4716-8a1e-49ac54c081be",
      "name": "글로벌 API 에러 처리 시스템 구현",
      "description": "API 호출 시 발생하는 에러를 중앙에서 처리하고 사용자 친화적인 메시지로 변환하는 시스템",
      "notes": "기존 Toast, ErrorBoundary 컴포넌트 활용",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-24T12:10:57.301Z",
      "updatedAt": "2025-07-24T13:27:47.611Z",
      "relatedFiles": [
        {
          "path": "/lib/api/interceptors/error.interceptor.ts",
          "type": "CREATE",
          "description": "에러 인터셉터"
        },
        {
          "path": "/lib/constants/error-messages.ts",
          "type": "CREATE",
          "description": "에러 메시지 매핑"
        },
        {
          "path": "/app/components/Toast.tsx",
          "type": "REFERENCE",
          "description": "Toast 컴포넌트"
        },
        {
          "path": "/app/components/ErrorBoundary.tsx",
          "type": "TO_MODIFY",
          "description": "API 에러 처리 추가"
        }
      ],
      "implementationGuide": "1. API 에러 인터셉터 생성\n   - /lib/api/interceptors/error.interceptor.ts\n   - HTTP 상태 코드별 처리\n   - 비즈니스 에러 코드 매핑\n2. 에러 메시지 매핑 테이블\n   - /lib/constants/error-messages.ts\n   - 한국어 사용자 친화적 메시지\n   - 기술적 에러를 일반 사용자가 이해할 수 있는 문구로\n3. Toast 통합\n   - 에러 발생 시 자동 Toast 표시\n   - 심각도에 따른 스타일 차별화\n   - 재시도 옵션 제공\n4. ErrorBoundary 확장\n   - API 에러도 캐치하도록 확장\n   - 컨텍스트별 폴백 UI",
      "verificationCriteria": "1. API 에러가 사용자 친화적 메시지로 표시\n2. 네트워크 에러, 서버 에러 구분 처리\n3. 에러 발생 시 적절한 폴백 UI\n4. 개발 환경에서는 상세 에러 정보 제공",
      "analysisResult": "게임플라자 백엔드 v2 API 완성(95% → 100%) 및 프론트엔드 연동 작업. 기존 UI 컴포넌트를 최대한 재사용하며 API 호출 로직만 변경. Repository 패턴, Clean Architecture 원칙 준수.",
      "summary": "글로벌 API 에러 처리 시스템이 이미 완전히 구현되어 있음. 에러 인터셉터, API 클라이언트 에러 처리, ErrorProvider, useApiError 훅이 모두 갖춰져 있음",
      "completedAt": "2025-07-24T13:27:47.611Z"
    }
  ]
}