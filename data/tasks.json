{
  "tasks": [
    {
      "id": "0b0ad652-542e-4c8e-ba31-c3cdf5f292e6",
      "name": "통계 페이지 차트 시각화 구현",
      "description": "현재 데이터만 표시되는 통계 페이지들에 Recharts 라이브러리를 적용하여 시각적인 차트를 구현합니다. 예약 통계, 매출 분석, 고객 분석, 기종 분석 페이지에 각각 적절한 차트를 추가합니다.",
      "notes": "모바일 환경에서 차트가 잘 보이도록 특별히 신경써야 합니다. 터치 인터랙션도 고려하세요.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/app/admin/analytics/reservations/page.tsx",
          "type": "TO_MODIFY",
          "description": "예약 통계 페이지"
        },
        {
          "path": "/app/admin/analytics/revenue/page.tsx",
          "type": "TO_MODIFY",
          "description": "매출 분석 페이지"
        },
        {
          "path": "/app/admin/analytics/customers/page.tsx",
          "type": "TO_MODIFY",
          "description": "고객 분석 페이지"
        },
        {
          "path": "/app/admin/analytics/devices/page.tsx",
          "type": "TO_MODIFY",
          "description": "기종 분석 페이지"
        }
      ],
      "implementationGuide": "1. Recharts 라이브러리 설치\n2. 각 통계 페이지에 적합한 차트 컴포넌트 개발\n   - 예약통계: BarChart (시간대별), LineChart (일별 추이)\n   - 매출분석: LineChart (일별), PieChart (기종별/결제수단별)\n   - 고객분석: PieChart (세그먼트), BarChart (재방문율)\n   - 기종분석: BarChart (이용률), TreeMap (매출기여도)\n3. 반응형 차트 디자인 적용\n4. 다크모드 지원",
      "verificationCriteria": "각 통계 페이지에서 데이터가 차트로 시각화되어 표시되고, 모바일과 데스크톱 모두에서 잘 보이며, 다크모드에서도 정상 작동하는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "e02c86b3-5122-4efc-954d-1940c83a5443",
      "name": "PWA 설정 및 오프라인 지원",
      "description": "Progressive Web App 설정을 완료하여 홈화면 추가, 오프라인 기본 지원, 푸시 알림 준비 등을 구현합니다.",
      "notes": "Next.js 14의 PWA 플러그인을 활용하면 더 쉽게 구현할 수 있습니다.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/public/manifest.json",
          "type": "CREATE",
          "description": "PWA 매니페스트 파일"
        },
        {
          "path": "/app/layout.tsx",
          "type": "TO_MODIFY",
          "description": "메타 태그 추가"
        },
        {
          "path": "/public/sw.js",
          "type": "CREATE",
          "description": "서비스 워커"
        }
      ],
      "implementationGuide": "1. manifest.json 파일 생성 및 설정\n   - 앱 이름, 아이콘, 테마 색상 설정\n   - display: standalone 설정\n2. Service Worker 구현\n   - 기본 캐싱 전략 설정\n   - 오프라인 시 기본 페이지 표시\n3. 아이콘 세트 준비 (다양한 크기)\n4. Apple 기기용 메타 태그 추가\n5. 설치 프롬프트 구현",
      "verificationCriteria": "모바일에서 홈화면에 추가 가능하고, 설치 후 전체화면으로 실행되며, 오프라인 상태에서도 기본 페이지가 표시되는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "c9d669ac-d5b6-45b4-b331-05488a3df8f0",
      "name": "SMS 인증 서비스 실제 연동",
      "description": "현재 콘솔에만 출력되는 SMS 인증 코드를 실제 SMS 서비스(알리고, 솔라피 등)와 연동합니다.",
      "notes": "비용을 고려하여 1일 발송 제한을 설정하는 것이 좋습니다.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/lib/services/sms.service.ts",
          "type": "CREATE",
          "description": "SMS 서비스 로직"
        },
        {
          "path": "/app/api/auth/send-code/route.ts",
          "type": "TO_MODIFY",
          "description": "인증 코드 발송 API"
        },
        {
          "path": "/.env.local",
          "type": "TO_MODIFY",
          "description": "SMS API 키 추가"
        }
      ],
      "implementationGuide": "1. SMS 서비스 제공업체 선택 (알리고 추천)\n2. API 키 발급 및 환경변수 설정\n3. /lib/services/sms.service.ts 구현\n   - sendVerificationCode 함수\n   - 발송 상태 확인 함수\n4. /app/api/auth/send-code/route.ts 수정\n5. 발송 실패 시 fallback 처리\n6. 발송 내역 로깅",
      "verificationCriteria": "회원가입 시 실제 휴대폰으로 인증 문자가 발송되고, 인증 코드 입력 시 정상적으로 인증이 완료되는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "65cdd1e7-b3fa-4567-82d8-e2ab48a13fae",
      "name": "계좌번호 관리 기능 완성",
      "description": "관리자가 결제용 계좌번호를 관리할 수 있는 기능을 완성합니다. 설정 페이지에서 계좌 정보를 추가/수정/삭제할 수 있어야 합니다.",
      "notes": "계좌번호는 암호화하여 저장하고, 표시할 때는 일부만 마스킹하여 보여주세요.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/app/admin/settings/payment/page.tsx",
          "type": "CREATE",
          "description": "계좌 관리 페이지"
        },
        {
          "path": "/app/api/admin/settings/payment/route.ts",
          "type": "CREATE",
          "description": "계좌 관리 API"
        },
        {
          "path": "/supabase/migrations/create_payment_accounts.sql",
          "type": "CREATE",
          "description": "계좌 테이블"
        }
      ],
      "implementationGuide": "1. /app/admin/settings/payment 페이지 생성\n2. 계좌 정보 관리 UI 구현\n   - 은행명, 계좌번호, 예금주 입력\n   - 복수 계좌 등록 가능\n   - 기본 계좌 설정\n3. payment_accounts 테이블 생성\n4. API 엔드포인트 구현\n5. 예약 상세에서 계좌 정보 표시",
      "verificationCriteria": "계좌 정보를 추가/수정/삭제할 수 있고, 예약 상세 페이지에서 계좌 정보가 표시되는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "72a1c22c-8c1a-48fb-9c77-a2c148afc791",
      "name": "데이터 내보내기 기능 구현",
      "description": "관리자가 예약, 매출, 고객 데이터를 Excel/CSV 형식으로 내보낼 수 있는 기능을 구현합니다.",
      "notes": "클라이언트 사이드에서 처리하되, 대용량 데이터는 서버에서 스트리밍으로 처리하는 것을 고려하세요.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "0b0ad652-542e-4c8e-ba31-c3cdf5f292e6"
        }
      ],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/lib/services/export.service.ts",
          "type": "CREATE",
          "description": "내보내기 서비스"
        },
        {
          "path": "/app/admin/reservations/page.tsx",
          "type": "TO_MODIFY",
          "description": "예약 관리 페이지"
        },
        {
          "path": "/app/admin/analytics/revenue/page.tsx",
          "type": "TO_MODIFY",
          "description": "매출 분석 페이지"
        }
      ],
      "implementationGuide": "1. xlsx 라이브러리 설치\n2. 내보내기 서비스 구현\n   - 예약 목록 내보내기\n   - 매출 데이터 내보내기\n   - 고객 목록 내보내기\n3. 각 관리 페이지에 내보내기 버튼 추가\n4. 날짜 범위 필터 적용\n5. 진행률 표시 (대용량 데이터)",
      "verificationCriteria": "각 관리 페이지에서 데이터를 Excel/CSV로 내보낼 수 있고, 한글이 깨지지 않으며, 날짜 필터가 적용되는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "9130c70c-f2ab-4743-975b-159af8280081",
      "name": "고객 블랙리스트 관리 구현",
      "description": "문제 고객을 블랙리스트로 관리하고, 예약 시 자동으로 차단하는 기능을 구현합니다.",
      "notes": "블랙리스트 등록/해제는 로그를 남기고, 관리자만 할 수 있도록 권한을 체크하세요.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/app/admin/customers/blacklist/page.tsx",
          "type": "CREATE",
          "description": "블랙리스트 관리 페이지"
        },
        {
          "path": "/app/api/reservations/route.ts",
          "type": "TO_MODIFY",
          "description": "예약 생성 시 체크"
        },
        {
          "path": "/supabase/migrations/create_blacklist.sql",
          "type": "CREATE",
          "description": "블랙리스트 테이블"
        }
      ],
      "implementationGuide": "1. user_blacklist 테이블 생성\n   - user_id, reason, created_at, created_by\n2. 고객 상세 페이지에 블랙리스트 토글 추가\n3. 블랙리스트 사유 입력 모달\n4. 예약 API에 블랙리스트 체크 로직 추가\n5. 블랙리스트 고객 목록 페이지 생성\n6. 블랙리스트 해제 기능",
      "verificationCriteria": "고객을 블랙리스트에 등록할 수 있고, 블랙리스트 고객이 예약을 시도할 때 차단되며, 관리자가 목록을 확인하고 해제할 수 있는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "f572bc1f-743f-46cc-81d6-9ee33ea40ba6",
      "name": "예약 리마인더 알림 구현",
      "description": "예약 1시간 전에 고객에게 리마인더 알림을 보내는 기능을 구현합니다.",
      "notes": "알림 수신 동의를 받은 고객에게만 발송하도록 처리하세요.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "c9d669ac-d5b6-45b4-b331-05488a3df8f0"
        },
        {
          "taskId": "e02c86b3-5122-4efc-954d-1940c83a5443"
        }
      ],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/supabase/functions/send-reminders/index.ts",
          "type": "CREATE",
          "description": "리마인더 Edge Function"
        },
        {
          "path": "/lib/services/notification.service.ts",
          "type": "CREATE",
          "description": "알림 서비스"
        }
      ],
      "implementationGuide": "1. Supabase Edge Function 생성\n   - 1시간 후 예약 조회\n   - 알림 발송 처리\n2. 알림 발송 서비스 구현\n   - SMS 리마인더 (선택)\n   - 푸시 알림 (PWA)\n3. 발송 내역 기록\n4. 중복 발송 방지 로직\n5. 크론잡 설정 (5분마다)",
      "verificationCriteria": "예약 1시간 전에 자동으로 리마인더가 발송되고, 중복 발송이 되지 않으며, 발송 내역이 기록되는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "0836dfa7-2b31-47bc-a644-b406fb107e88",
      "name": "성능 최적화 - 이미지 및 번들 크기",
      "description": "이미지 최적화, 코드 스플리팅, 번들 크기 최적화를 통해 초기 로딩 속도를 개선합니다.",
      "notes": "모바일 3G 환경에서도 3초 이내 로딩을 목표로 합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "0b0ad652-542e-4c8e-ba31-c3cdf5f292e6"
        }
      ],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/next.config.js",
          "type": "TO_MODIFY",
          "description": "Next.js 설정"
        },
        {
          "path": "/app/components/OptimizedImage.tsx",
          "type": "CREATE",
          "description": "최적화된 이미지 컴포넌트"
        }
      ],
      "implementationGuide": "1. Next.js Image 컴포넌트 전면 적용\n2. 동적 import로 코드 스플리팅\n   - 관리자 페이지 lazy loading\n   - 차트 라이브러리 lazy loading\n3. 번들 분석 및 최적화\n   - tree shaking 점검\n   - 불필요한 의존성 제거\n4. 폰트 최적화\n5. Lighthouse 점수 90점 이상 목표",
      "verificationCriteria": "Lighthouse 성능 점수 90점 이상, 3G 환경에서 3초 이내 초기 로딩, 번들 크기 50% 감소",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "494bb98c-55ed-4e59-9f06-cba7e0e098ea",
      "name": "보안 점검 및 강화",
      "description": "오픈 전 전체적인 보안 점검을 수행하고 취약점을 보완합니다.",
      "notes": "OWASP Top 10을 기준으로 점검하세요.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/middleware.ts",
          "type": "TO_MODIFY",
          "description": "보안 미들웨어"
        },
        {
          "path": "/lib/security/index.ts",
          "type": "CREATE",
          "description": "보안 유틸리티"
        }
      ],
      "implementationGuide": "1. API Rate Limiting 강화\n   - IP 기반 제한\n   - 사용자별 제한\n2. Input Validation 전수 점검\n3. XSS/CSRF 방어 확인\n4. SQL Injection 방어 확인\n5. 환경변수 및 시크릿 관리 점검\n6. HTTPS 강제 적용\n7. 보안 헤더 설정",
      "verificationCriteria": "주요 보안 취약점이 없고, Rate Limiting이 작동하며, 모든 입력값이 검증되는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    },
    {
      "id": "40281342-a96d-4685-9d9d-c25af4ef167a",
      "name": "E2E 테스트 기본 구성",
      "description": "Playwright를 사용하여 핵심 사용자 시나리오에 대한 E2E 테스트를 구성합니다.",
      "notes": "우선 happy path 위주로 작성하고, 점진적으로 엣지 케이스를 추가하세요.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-22T06:25:56.101Z",
      "updatedAt": "2025-07-22T06:25:56.101Z",
      "relatedFiles": [
        {
          "path": "/tests/e2e/auth.spec.ts",
          "type": "CREATE",
          "description": "인증 테스트"
        },
        {
          "path": "/tests/e2e/reservation.spec.ts",
          "type": "CREATE",
          "description": "예약 테스트"
        },
        {
          "path": "/playwright.config.ts",
          "type": "CREATE",
          "description": "Playwright 설정"
        }
      ],
      "implementationGuide": "1. Playwright 설치 및 설정\n2. 핵심 시나리오 테스트 작성\n   - 회원가입/로그인 플로우\n   - 예약 생성 플로우\n   - 관리자 체크인 플로우\n   - 예약 취소 플로우\n3. CI/CD 파이프라인 연동\n4. 테스트 데이터 초기화 스크립트",
      "verificationCriteria": "주요 사용자 플로우가 자동화된 테스트로 검증되고, CI에서 실행되는지 확인",
      "analysisResult": "게임플라자 예약 시스템 MVP 오픈을 위한 필수 작업 완료. 현재 85% 완성도로 핵심 기능은 대부분 구현되었으나, 통계 시각화, PWA 설정, 일부 관리 기능이 미완성 상태입니다."
    }
  ]
}