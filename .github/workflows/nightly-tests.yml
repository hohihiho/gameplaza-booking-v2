name: 🌙 Nightly Comprehensive Tests

on:
  schedule:
    # 매일 새벽 2시 (KST 11시)에 실행
    - cron: '0 2 * * *'
  workflow_dispatch: # 수동 실행 가능

env:
  NODE_VERSION: '18'

jobs:
  # 전체 회귀 테스트
  full-regression-tests:
    name: 🔄 Full Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🚀 Start application
        run: npm start &
        env:
          NODE_ENV: test
          
      - name: ⏳ Wait for application
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
          
      - name: 🧪 Run all unit tests
        run: npm run test:coverage
        
      - name: 🎭 Run complete E2E test suite
        run: npx playwright test --project=chromium --project=firefox --project=webkit
        
      - name: 📱 Run mobile tests on all devices
        run: |
          npx playwright test --project="iPhone 12"
          npx playwright test --project="Galaxy S21"
          npx playwright test --project="iPad Pro"
          
      - name: 📊 Generate comprehensive report
        run: |
          mkdir -p nightly-reports
          echo "# 🌙 Nightly Test Report - $(date '+%Y-%m-%d')" > nightly-reports/summary.md
          echo "" >> nightly-reports/summary.md
          
          # 커버리지 정보
          if [ -f coverage/coverage-summary.json ]; then
            LINES_PCT=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
            BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
            STATEMENTS_PCT=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
            
            echo "## 📊 Coverage Metrics" >> nightly-reports/summary.md
            echo "- Lines: $LINES_PCT%" >> nightly-reports/summary.md
            echo "- Functions: $FUNCTIONS_PCT%" >> nightly-reports/summary.md
            echo "- Branches: $BRANCHES_PCT%" >> nightly-reports/summary.md
            echo "- Statements: $STATEMENTS_PCT%" >> nightly-reports/summary.md
            echo "" >> nightly-reports/summary.md
          fi
          
          # 테스트 결과 요약
          echo "## 🧪 Test Results" >> nightly-reports/summary.md
          echo "- Unit Tests: $(npm run test 2>&1 | grep -c 'PASS\|FAIL' || echo 'N/A')" >> nightly-reports/summary.md
          echo "- E2E Tests: All browsers completed" >> nightly-reports/summary.md
          echo "- Mobile Tests: All devices completed" >> nightly-reports/summary.md
          echo "" >> nightly-reports/summary.md
          
      - name: 📊 Upload nightly report
        uses: actions/upload-artifact@v3
        with:
          name: nightly-test-report-${{ github.run_number }}
          path: |
            nightly-reports/
            coverage/
            test-results/
            playwright-report/
          retention-days: 30

  # 부하 테스트
  load-tests:
    name: 🚀 Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 📊 Install load testing tools
        run: |
          npm install -g artillery autocannon
          
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🚀 Start application
        run: npm start &
        env:
          NODE_ENV: production
          
      - name: ⏳ Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          
      - name: 🎯 Run load tests
        run: |
          # Artillery를 사용한 부하 테스트
          cat > load-test-config.yml << EOF
          config:
            target: 'http://localhost:3000'
            phases:
              - duration: 60
                arrivalRate: 10
              - duration: 120
                arrivalRate: 50
              - duration: 60
                arrivalRate: 10
            payload:
              path: './users.csv'
              fields:
                - 'email'
          scenarios:
            - name: "Homepage Load"
              weight: 30
              flow:
                - get:
                    url: "/"
            - name: "Reservations Page"
              weight: 40
              flow:
                - get:
                    url: "/reservations"
            - name: "New Reservation"
              weight: 20
              flow:
                - get:
                    url: "/reservations/new"
            - name: "API Endpoints"
              weight: 10
              flow:
                - get:
                    url: "/api/v2/devices"
                - get:
                    url: "/api/v2/reservations"
          EOF
          
          # 더미 사용자 데이터 생성
          echo "email" > users.csv
          for i in {1..100}; do echo "user$i@test.com" >> users.csv; done
          
          # 부하 테스트 실행
          artillery run load-test-config.yml --output load-test-results.json
          
      - name: 📈 Generate load test report
        run: |
          artillery report load-test-results.json --output load-test-report.html
          
          # 기본 성능 검증
          MEDIAN_RESPONSE=$(cat load-test-results.json | jq '.aggregate.latency.median')
          P95_RESPONSE=$(cat load-test-results.json | jq '.aggregate.latency.p95')
          ERROR_RATE=$(cat load-test-results.json | jq '.aggregate.counters["errors.ECONNREFUSED"] // 0')
          
          echo "Median Response Time: ${MEDIAN_RESPONSE}ms"
          echo "P95 Response Time: ${P95_RESPONSE}ms"
          echo "Error Count: $ERROR_RATE"
          
          # 성능 기준 체크
          if (( $(echo "$MEDIAN_RESPONSE > 500" | bc -l) )); then
            echo "⚠️ Median response time $MEDIAN_RESPONSE ms exceeds 500ms threshold"
          fi
          
          if (( $(echo "$P95_RESPONSE > 2000" | bc -l) )); then
            echo "⚠️ P95 response time $P95_RESPONSE ms exceeds 2000ms threshold"
          fi
          
      - name: 📊 Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-report.html
          retention-days: 30

  # 보안 스캔 (심화)
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level=low --json > npm-audit-results.json || true
          
      - name: 🛡️ Install and run ESLint security plugin
        run: |
          npm install --no-save eslint-plugin-security
          npx eslint . --ext .js,.jsx,.ts,.tsx --config .eslintrc.security.js || true
          
      - name: 🔐 Check for secrets in code
        run: |
          # 간단한 시크릿 패턴 검색
          echo "Checking for potential secrets..."
          grep -r -E "(password|secret|key|token)" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . || true
          
      - name: 📊 Generate security report
        run: |
          mkdir -p security-reports
          echo "# 🔒 Security Audit Report - $(date)" > security-reports/summary.md
          echo "" >> security-reports/summary.md
          
          if [ -f npm-audit-results.json ]; then
            VULNERABILITIES=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.total // 0')
            echo "## NPM Audit Results" >> security-reports/summary.md
            echo "- Total vulnerabilities: $VULNERABILITIES" >> security-reports/summary.md
            echo "" >> security-reports/summary.md
          fi
          
      - name: 📊 Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-report
          path: |
            security-reports/
            npm-audit-results.json
          retention-days: 90

  # 데이터베이스 무결성 테스트
  database-integrity:
    name: 🗄️ Database Integrity Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🗄️ Run database migrations
        run: |
          # Supabase CLI로 마이그레이션 적용
          if [ -d "supabase/migrations" ]; then
            echo "Running database migrations..."
            # 실제 마이그레이션 실행 로직
          fi
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          
      - name: 🧪 Run database integration tests
        run: |
          # 데이터베이스 연동 테스트 실행
          npm run test -- __tests__/integration/
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          
      - name: 📊 Generate database test report
        run: |
          echo "Database integrity tests completed successfully"

  # 종합 리포트 생성 및 알림
  nightly-summary:
    name: 📋 Nightly Summary & Notification
    needs: [full-regression-tests, load-tests, security-audit, database-integrity]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: 📊 Generate comprehensive summary
        run: |
          mkdir -p final-reports
          
          cat > final-reports/nightly-summary.md << EOF
          # 🌙 Nightly Test Summary - $(date '+%Y-%m-%d')
          
          ## Job Results
          - Full Regression Tests: ${{ needs.full-regression-tests.result }}
          - Load Tests: ${{ needs.load-tests.result }}
          - Security Audit: ${{ needs.security-audit.result }}
          - Database Integrity: ${{ needs.database-integrity.result }}
          
          ## Quick Links
          - [Coverage Report](coverage/lcov-report/index.html)
          - [E2E Test Results](playwright-report/index.html)
          - [Load Test Report](load-test-report.html)
          - [Security Audit](security-reports/summary.md)
          
          ## Recommendations
          $([ "${{ needs.full-regression-tests.result }}" != "success" ] && echo "- 🚨 Fix failing regression tests")
          $([ "${{ needs.load-tests.result }}" != "success" ] && echo "- ⚡ Review performance issues")
          $([ "${{ needs.security-audit.result }}" != "success" ] && echo "- 🔒 Address security vulnerabilities")
          $([ "${{ needs.database-integrity.result }}" != "success" ] && echo "- 🗄️ Fix database integrity issues")
          
          Generated at: $(date)
          EOF
          
      - name: 📊 Upload final summary
        uses: actions/upload-artifact@v3
        with:
          name: nightly-summary-${{ github.run_number }}
          path: final-reports/
          retention-days: 90
          
      - name: 🚨 Send notification on failure
        if: |
          needs.full-regression-tests.result == 'failure' ||
          needs.load-tests.result == 'failure' ||
          needs.security-audit.result == 'failure' ||
          needs.database-integrity.result == 'failure'
        run: |
          echo "🚨 Nightly tests failed!"
          echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Slack/Discord 알림 전송 (선택사항)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🌙 Nightly tests failed! Check details at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: ✅ Send success notification
        if: |
          needs.full-regression-tests.result == 'success' &&
          needs.load-tests.result == 'success' &&
          needs.security-audit.result == 'success' &&
          needs.database-integrity.result == 'success'
        run: |
          echo "✅ All nightly tests passed!"
          echo "Summary available at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"