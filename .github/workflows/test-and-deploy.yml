name: 테스트 및 배포

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  # 1. 코드 품질 검사
  quality-check:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm install

      - name: ESLint 검사
        run: npm run lint

      - name: TypeScript 타입 체크
        run: npm run type-check

      - name: 보안 취약점 검사
        run: npm run security:check

  # 2. 단위 테스트
  unit-tests:
    name: 단위 테스트
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm install

      - name: 단위 테스트 실행
        run: npm run test:unit -- --coverage

      - name: 커버리지 리포트 업로드
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unit
          name: unit-coverage

  # 3. 통합 테스트
  integration-tests:
    name: 통합 테스트
    runs-on: ubuntu-latest
    needs: quality-check
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gameplaza_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm install

      - name: 테스트 DB 마이그레이션
        run: |
          npm run test:db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gameplaza_test

      - name: 통합 테스트 실행
        run: npm run test:integration -- --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gameplaza_test

      - name: 커버리지 리포트 업로드
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: integration
          name: integration-coverage

  # 4. E2E 테스트
  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm install

      - name: Playwright 브라우저 설치
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Next.js 빌드
        run: npm run build

      - name: E2E 테스트 실행 (${{ matrix.browser }})
        run: npm run test:e2e -- --project=${{ matrix.browser }}

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  # 5. 성능 테스트
  performance-tests:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm install

      - name: Next.js 빌드
        run: npm run build

      - name: Lighthouse CI 실행
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: K6 부하 테스트
        run: |
          wget https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz
          tar -xzf k6-v0.47.0-linux-amd64.tar.gz
          ./k6 run tests/k6/load-test-scenarios.js --env BASE_URL=http://localhost:3000

  # 6. 모바일 테스트
  mobile-tests:
    name: 모바일 환경 테스트
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm install

      - name: 모바일 디바이스 테스트
        run: npm run test:e2e:mobile

      - name: PWA 검증
        run: |
          npm run build
          npm run test:pwa

  # 7. 보안 스캔
  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 의존성 취약점 스캔
        run: |
          npm audit --audit-level=moderate
          npm run security:audit

      - name: OWASP 의존성 체크
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'gameplaza-v2'
          path: '.'
          format: 'HTML'

      - name: 스캔 결과 업로드
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

  # 8. 스테이징 배포
  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Vercel 배포 (스테이징)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          alias-domains: staging-gameplaza.vercel.app

  # 9. 프로덕션 배포
  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://gameplaza.kr
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Vercel 배포 (프로덕션)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          alias-domains: |
            gameplaza.kr
            www.gameplaza.kr

      - name: 배포 알림
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '프로덕션 배포가 완료되었습니다!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # 10. 회귀 테스트
  regression-tests:
    name: 회귀 테스트
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 스테이징 환경 회귀 테스트
        run: |
          npm install
          npm run test:e2e -- --config=playwright.staging.config.ts
        env:
          STAGING_URL: https://staging-gameplaza.vercel.app

  # 11. 테스트 리포트 생성
  test-report:
    name: 테스트 리포트 생성
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    if: always()
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 테스트 결과 수집
        uses: actions/download-artifact@v4

      - name: 리포트 생성
        run: |
          npm install
          npm run generate:test-report

      - name: 리포트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: test-summary-report
          path: reports/test-summary.html