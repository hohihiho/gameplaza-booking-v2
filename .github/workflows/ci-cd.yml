name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # 1. 코드 품질 검사
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      # TypeScript 체크 임시 비활성화 (빌드 오류 해결 중)
      # - name: Type check
      #   run: npm run type-check

      - name: Lint check (warnings only)
        run: npm run lint || true

      - name: Format check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  # 2. 테스트
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.test

      - name: Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            npm test -- --testPathPattern="^((?!integration).)*$" --coverage
          else
            npm test -- --testPathPattern="integration" --runInBand
          fi

      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # 3. 빌드
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/

  # 4. 보안 스캔
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Run dependency audit
        run: npm audit --audit-level=high

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 5. 성능 테스트
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next/

      - name: Run performance tests
        run: npm test -- --testPathPattern="performance" --runInBand
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Check performance metrics
        run: |
          if [ -f "performance-results.json" ]; then
            p95=$(jq '.p95' performance-results.json)
            if (( $(echo "$p95 > 200" | bc -l) )); then
              echo "❌ Performance regression detected: p95=$p95ms"
              exit 1
            fi
            echo "✅ Performance check passed: p95=$p95ms"
          fi

  # 6. Preview 배포 (PR용)
  preview-deploy:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--build-env NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} --build-env NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}'
          alias-domains: pr-{{PR_NUMBER}}.gameplaza.vercel.app

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Preview 배포가 완료되었습니다!\n\n미리보기: https://pr-${{ github.event.number }}.gameplaza.vercel.app'
            })

  # 7. 프로덕션 배포
  production-deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [build, security, performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "DEPLOYMENT_ID=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV

      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;

      - name: Deploy to Vercel Production
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --build-env NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} --build-env NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ job.status }}',
              environment_url: '${{ steps.vercel-deploy.outputs.preview-url }}',
              description: 'Deployment ${{ job.status }}'
            });

  # 8. 배포 후 검증
  post-deploy-verify:
    name: Post Deployment Verification
    runs-on: ubuntu-latest
    needs: production-deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh "https://gameplaza.vercel.app"

      - name: Run smoke tests
        run: |
          # 주요 엔드포인트 테스트
          endpoints=(
            "/api/v2/health"
            "/api/v2/ready"
            "/api/v2/reservations?limit=1"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://gameplaza.vercel.app$endpoint")
            if [ "$response" != "200" ]; then
              echo "❌ Failed: $endpoint returned $response"
              exit 1
            fi
            echo "✅ Passed: $endpoint"
          done

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue?.number || 1,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ 프로덕션 배포가 성공적으로 완료되었습니다!\n\n커밋: ${{ github.sha }}\n배포 시간: ${{ env.DEPLOYMENT_ID }}'
            })

  # 9. 롤백 준비
  prepare-rollback:
    name: Prepare Rollback
    runs-on: ubuntu-latest
    needs: production-deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Tag successful deployment
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = `deploy-${new Date().toISOString().split('T')[0]}-${{ github.run_number }}`;
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });
            console.log(`Created deployment tag: ${tagName}`);

      - name: Save deployment metadata
        run: |
          cat > deployment-metadata.json <<EOF
          {
            "commit": "${{ github.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployer": "${{ github.actor }}",
            "run_id": "${{ github.run_id }}",
            "version": "$(date +%Y%m%d.%H%M%S)"
          }
          EOF

      - name: Upload deployment metadata
        uses: actions/upload-artifact@v4
        with:
          name: deployment-metadata-${{ github.run_id }}
          path: deployment-metadata.json
          retention-days: 90