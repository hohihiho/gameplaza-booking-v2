'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { format } from 'date-fns'
import { ko } from 'date-fns/locale'

interface Alert {
  id: string
  type: 'no_show' | 'device_issue' | 'urgent_reservation' | 'system' | 'payment_issue'
  title: string
  message: string
  timestamp: Date
  priority: 'low' | 'medium' | 'high' | 'critical'
  actionRequired?: boolean
  actionUrl?: string
  actionLabel?: string
}

export default function RealtimeAdminAlerts() {
  const [alerts, setAlerts] = useState<Alert[]>([])
  const [isConnected, setIsConnected] = useState(false)
  const [showAll, setShowAll] = useState(false)

  useEffect(() => {
    // SSE Ïó∞Í≤∞ ÏÑ§Ï†ï
    const eventSource = new EventSource('/api/sse/admin-alerts')
    
    eventSource.onopen = () => {
      console.log('‚úÖ Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞ ÏÑ±Í≥µ')
      setIsConnected(true)
    }
    
    eventSource.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data)
        
        if (data.type === 'alert') {
          const newAlert: Alert = {
            ...data.alert,
            timestamp: new Date(data.alert.timestamp)
          }
          
          // ÏÉà ÏïåÎ¶º Ï∂îÍ∞Ä (ÏµúÏã†Ïàú)
          setAlerts(prev => [newAlert, ...prev].slice(0, 50)) // ÏµúÎåÄ 50Í∞ú
          
          // Ï§ëÏöî ÏïåÎ¶ºÏù∏ Í≤ΩÏö∞ Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º
          if (newAlert.priority === 'high' || newAlert.priority === 'critical') {
            showBrowserNotification(newAlert)
          }
          
          // ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù (Ï§ëÏöîÎèÑÏóê Îî∞Îùº Îã§Î•∏ ÏÜåÎ¶¨)
          playAlertSound(newAlert.priority)
        }
      } catch (err) {
        console.error('ÏïåÎ¶º ÌååÏã± Ïò§Î•ò:', err)
      }
    }
    
    eventSource.onerror = () => {
      console.error('‚ùå Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º Ïó∞Í≤∞ Ïò§Î•ò')
      setIsConnected(false)
    }
    
    // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission()
    }
    
    return () => {
      eventSource.close()
    }
  }, [])

  const showBrowserNotification = (alert: Alert) => {
    if ('Notification' in window && Notification.permission === 'granted') {
      const notification = new Notification(alert.title, {
        body: alert.message,
        icon: '/favicon.ico',
        badge: '/favicon.ico',
        tag: alert.id,
        requireInteraction: alert.priority === 'critical'
      })
      
      // ÌÅ¥Î¶≠ Ïãú Ïï°ÏÖò URLÎ°ú Ïù¥Îèô
      if (alert.actionUrl) {
        notification.onclick = () => {
          window.open(alert.actionUrl, '_blank')
          notification.close()
        }
      }
    }
  }

  const playAlertSound = (priority: Alert['priority']) => {
    // Ïã§Ï†úÎ°úÎäî Ïò§ÎîîÏò§ ÌååÏùº Ïû¨ÏÉù
    console.log(`üîä ÏïåÎ¶ºÏùå Ïû¨ÏÉù: ${priority}`)
  }

  const dismissAlert = (alertId: string) => {
    setAlerts(prev => prev.filter(a => a.id !== alertId))
  }

  const getPriorityColor = (priority: Alert['priority']) => {
    switch (priority) {
      case 'critical': return 'bg-red-500 text-white'
      case 'high': return 'bg-orange-500 text-white'
      case 'medium': return 'bg-yellow-500 text-white'
      case 'low': return 'bg-blue-500 text-white'
      default: return 'bg-gray-500 text-white'
    }
  }

  const getTypeIcon = (type: Alert['type']) => {
    switch (type) {
      case 'no_show': return 'üö´'
      case 'device_issue': return 'üîß'
      case 'urgent_reservation': return '‚ö°'
      case 'payment_issue': return 'üí≥'
      case 'system': return '‚öôÔ∏è'
      default: return 'üì¢'
    }
  }

  // ÌëúÏãúÌï† ÏïåÎ¶º (ÏµúÍ∑º 5Í∞ú ÎòêÎäî Ï†ÑÏ≤¥)
  const displayAlerts = showAll ? alerts : alerts.slice(0, 5)
  
  // Ï§ëÏöî ÏïåÎ¶º Í∞úÏàò
  const criticalCount = alerts.filter(a => 
    a.priority === 'critical' || a.priority === 'high'
  ).length

  return (
    <div className="fixed top-20 right-4 z-50 w-96 max-w-full">
      {/* Ìó§Îçî */}
      <div className="bg-white rounded-t-lg shadow-lg p-4 border-b">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <h3 className="font-semibold">Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º</h3>
            {criticalCount > 0 && (
              <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                {criticalCount}
              </span>
            )}
          </div>
          <div className="flex items-center gap-2">
            <div className={`w-2 h-2 rounded-full ${
              isConnected ? 'bg-green-500' : 'bg-red-500'
            } animate-pulse`} />
            <button
              onClick={() => setShowAll(!showAll)}
              className="text-sm text-blue-600 hover:text-blue-800"
            >
              {showAll ? 'Í∞ÑÎûµÌûà' : 'Î™®Îëê Î≥¥Í∏∞'}
            </button>
          </div>
        </div>
      </div>

      {/* ÏïåÎ¶º Î™©Î°ù */}
      <div className="bg-white rounded-b-lg shadow-lg max-h-[600px] overflow-y-auto">
        <AnimatePresence>
          {displayAlerts.length === 0 ? (
            <div className="p-8 text-center text-gray-500">
              ÏÉàÎ°úÏö¥ ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§
            </div>
          ) : (
            displayAlerts.map(alert => (
              <motion.div
                key={alert.id}
                initial={{ opacity: 0, x: 100 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -100 }}
                className="border-b last:border-b-0"
              >
                <div className="p-4 hover:bg-gray-50 transition-colors">
                  <div className="flex items-start gap-3">
                    {/* ÏïÑÏù¥ÏΩò */}
                    <div className="text-2xl">
                      {getTypeIcon(alert.type)}
                    </div>
                    
                    {/* ÎÇ¥Ïö© */}
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          getPriorityColor(alert.priority)
                        }`}>
                          {alert.priority.toUpperCase()}
                        </span>
                        <h4 className="font-semibold text-sm">
                          {alert.title}
                        </h4>
                      </div>
                      
                      <p className="text-sm text-gray-600 mb-2">
                        {alert.message}
                      </p>
                      
                      <div className="flex items-center justify-between">
                        <span className="text-xs text-gray-400">
                          {format(alert.timestamp, 'HH:mm:ss', { locale: ko })}
                        </span>
                        
                        <div className="flex items-center gap-2">
                          {alert.actionRequired && alert.actionUrl && (
                            <a
                              href={alert.actionUrl}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-xs bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
                            >
                              {alert.actionLabel || 'Ï≤òÎ¶¨ÌïòÍ∏∞'}
                            </a>
                          )}
                          
                          <button
                            onClick={() => dismissAlert(alert.id)}
                            className="text-xs text-gray-400 hover:text-gray-600"
                          >
                            Îã´Í∏∞
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))
          )}
        </AnimatePresence>
      </div>

      {/* ÏïåÎ¶º ÏÑºÌÑ∞ ÎßÅÌÅ¨ */}
      {alerts.length > 5 && !showAll && (
        <div className="bg-gray-100 p-2 text-center">
          <button className="text-sm text-blue-600 hover:text-blue-800">
            {alerts.length - 5}Í∞ú Îçî Î≥¥Í∏∞
          </button>
        </div>
      )}
    </div>
  )
}