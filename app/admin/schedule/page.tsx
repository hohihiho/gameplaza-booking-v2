// 운영 일정 관리 페이지
// 비전공자 설명: 관리자가 휴무일, 특별 운영 시간 등을 관리하는 페이지입니다
'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Calendar,
  // CalendarDays,
  Plus,
  // Edit,
  Trash2,
  // Save,
  // X,
  ChevronLeft,
  ChevronRight,
  AlertCircle,
  Clock,
  // Info,
  Sun,
  Moon,
  Coffee,
  XCircle,
  Loader2,
  X,
  CalendarPlus,
  RefreshCw
} from 'lucide-react';

type ScheduleEvent = {
  id: string;
  date: string;
  endDate?: string; // 기간 설정시 사용
  title: string;
  type: 'special' | 'early_open' | 'overnight' | 'early_close' | 'event' | 'reservation_block';
  description?: string;
  startTime?: string;
  endTime?: string;
  isRecurring?: boolean;
  recurringType?: 'weekly' | 'monthly';
  affectsReservation: boolean;
  blockType?: 'early' | 'overnight' | 'all_day'; // 예약 제한 타입
  isAutoGenerated?: boolean;
  sourceType?: 'manual' | 'reservation_auto';
};

const eventTypeConfig = {
  early_open: {
    label: '조기 영업',
    icon: Sun,
    color: 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20',
    borderColor: 'border-yellow-200 dark:border-yellow-800'
  },
  overnight: {
    label: '밤샘 영업',
    icon: Moon,
    color: 'text-purple-600 bg-purple-100 dark:bg-purple-900/20',
    borderColor: 'border-purple-200 dark:border-purple-800'
  },
  early_close: {
    label: '조기 마감',
    icon: Coffee,
    color: 'text-orange-600 bg-orange-100 dark:bg-orange-900/20',
    borderColor: 'border-orange-200 dark:border-orange-800'
  },
  reservation_block: {
    label: '예약 제한',
    icon: XCircle,
    color: 'text-red-600 bg-red-100 dark:bg-red-900/20',
    borderColor: 'border-red-200 dark:border-red-800'
  },
  special: {
    label: '특별 운영',
    icon: Clock,
    color: 'text-blue-600 bg-blue-100 dark:bg-blue-900/20',
    borderColor: 'border-blue-200 dark:border-blue-800'
  },
  event: {
    label: '이벤트',
    icon: Calendar,
    color: 'text-green-600 bg-green-100 dark:bg-green-900/20',
    borderColor: 'border-green-200 dark:border-green-800'
  }
};

interface Holiday {
  id?: string;
  name: string;
  date: string;
  type: 'official' | 'temporary' | 'substitute';
  is_red_day: boolean;
}

export default function ScheduleManagementPage() {
  const [selectedMonth, setSelectedMonth] = useState(new Date());
  const [events, setEvents] = useState<ScheduleEvent[]>([]);
  const [holidays, setHolidays] = useState<Holiday[]>([]);
  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);
  const [isAddingEvent, setIsAddingEvent] = useState(false);
  const [editingEvent, setEditingEvent] = useState<ScheduleEvent | null>(null);
  const [selectedDate, setSelectedDate] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showDateEventsModal, setShowDateEventsModal] = useState(false);
  const [isGeneratingWeekend, setIsGeneratingWeekend] = useState(false);
  const [isSyncingHolidays, setIsSyncingHolidays] = useState(false);
  const [isSyncingReservations, setIsSyncingReservations] = useState(false);

  // 24시간 표시 형식 변환 함수
  const formatTime24Hour = (time: string) => {
    if (!time) return '';
    const [hour, minute] = time.split(':');
    const hourNum = parseInt(hour || '0');
    
    // 0~5시를 24~29시로 변환
    if (hourNum >= 0 && hourNum <= 5) {
      return `${hourNum + 24}:${minute}`;
    }
    return `${hour}:${minute}`;
  };

  // 공휴일 데이터 불러오기
  const loadHolidays = async () => {
    try {
      const year = selectedMonth.getFullYear();
      const month = selectedMonth.getMonth() + 1;
      
      const response = await fetch(`/api/admin/holidays?year=${year}&month=${month}`, {
        credentials: 'include'
      });
      
      if (response.ok) {
        const data = await response.json();
        setHolidays(data.holidays || []);
        if (data.lastSyncTime) {
          setLastSyncTime(new Date(data.lastSyncTime));
        }
      }
    } catch (error) {
      console.error('공휴일 로드 실패:', error);
    }
  };

  // 공휴일 동기화
  const syncHolidays = async () => {
    try {
      setIsSyncingHolidays(true);
      const year = selectedMonth.getFullYear();
      
      const response = await fetch('/api/admin/holidays/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ year }),
      });
      
      console.log('동기화 API 응답 상태:', response.status);
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('동기화 API 에러 응답:', errorData);
        throw new Error(`동기화 실패: ${response.status} - ${errorData}`);
      }
      
      const result = await response.json();
      console.log('동기화 결과:', result);
      alert(`공휴일 동기화 완료!\n생성: ${result.result.created}개\n업데이트: ${result.result.updated}개`);
      await loadHolidays();
    } catch (error) {
      console.error('공휴일 동기화 실패:', error);
      alert('공휴일 동기화에 실패했습니다');
    } finally {
      setIsSyncingHolidays(false);
    }
  };


  // 일정 데이터 불러오기
  const loadEvents = async () => {
    try {
      setIsLoading(true);
      const year = selectedMonth.getFullYear();
      const month = selectedMonth.getMonth() + 1;
      
      const response = await fetch(`/api/admin/schedule?year=${year}&month=${month}`, {
        credentials: 'include'
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '일정을 불러올 수 없습니다');
      }
      
      const { events: data } = await response.json();
      
      // 데이터 형식 변환
      const formattedEvents = data.map((event: any) => ({
        id: event.id,
        date: event.date,
        endDate: event.end_date,
        title: event.title || eventTypeConfig[event.type as keyof typeof eventTypeConfig]?.label || '',
        type: event.type,
        description: event.description,
        startTime: event.start_time,
        endTime: event.end_time,
        isRecurring: event.is_recurring,
        recurringType: event.recurring_type,
        affectsReservation: event.affects_reservation,
        blockType: event.block_type,
        isAutoGenerated: event.is_auto_generated,
        sourceType: event.source_type
      }));
      
      setEvents(formattedEvents);
    } catch (error) {
      console.error('일정 로드 실패:', error);
      // 에러 처리 (토스트 메시지 등)
    } finally {
      setIsLoading(false);
    }
  };

  // 선택된 월이 변경될 때마다 데이터 다시 로드
  useEffect(() => {
    loadEvents();
    loadHolidays();
  }, [selectedMonth]);

  // 캘린더 데이터 생성
  const generateCalendarDays = () => {
    const year = selectedMonth.getFullYear();
    const month = selectedMonth.getMonth();
    const firstDay = new Date(year, month, 1);
    // 월요일부터 시작하도록 계산 (월=0, 화=1, ..., 일=6)
    const firstDayOfWeek = firstDay.getDay(); // 0=일요일, 1=월요일, ..., 6=토요일
    const daysFromMonday = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1; // 일요일이면 6, 나머지는 -1
    const startDate = new Date(year, month, 1 - daysFromMonday);
    
    const days = [];
    const current = new Date(startDate);
    
    // 6주 표시 (42일)
    for (let i = 0; i < 42; i++) {
      days.push(new Date(current));
      current.setDate(current.getDate() + 1);
    }
    
    return days;
  };

  const formatDate = (date: Date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const getEventsForDate = (date: string) => {
    return events.filter(event => {
      // 단일 날짜 이벤트
      if (!event.endDate) {
        return event.date === date;
      }
      
      // 기간 설정된 이벤트 - UTC 파싱 방지를 위해 로컬 시간으로 처리
      const eventStart = new Date(event.date + 'T00:00:00');
      const eventEnd = new Date(event.endDate + 'T00:00:00');
      const checkDate = new Date(date + 'T00:00:00');
      
      return checkDate >= eventStart && checkDate <= eventEnd;
    });
  };

  // 특정 날짜의 공휴일 가져오기
  const getHolidayForDate = (date: string) => {
    return holidays.find(holiday => holiday.date === date);
  };

  const handleSaveEvent = async (eventData: Partial<ScheduleEvent>) => {
    try {
      setIsLoading(true);
      
      // title 설정
      const finalData = {
        ...eventData,
        title: eventData.type === 'event' 
          ? (eventData.title || eventTypeConfig.event.label)
          : eventTypeConfig[eventData.type as keyof typeof eventTypeConfig]?.label || ''
      };

      if (editingEvent) {
        // 수정
        const response = await fetch('/api/admin/schedule', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify({
            id: editingEvent.id,
            ...finalData
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || '일정 수정에 실패했습니다');
        }
      } else {
        // 생성
        const postData = {
          date: selectedDate || formatDate(new Date()),
          ...finalData
        };
        
        const response = await fetch('/api/admin/schedule', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(postData),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || '일정 생성에 실패했습니다');
        }
      }
      
      // 데이터 새로고침
      await loadEvents();
      
      setIsAddingEvent(false);
      setEditingEvent(null);
      setSelectedDate(null);
    } catch (error) {
      console.error('일정 저장 실패:', error);
      alert(error instanceof Error ? error.message : '일정 저장에 실패했습니다');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteEvent = async (eventId: string) => {
    if (!confirm('이 일정을 삭제하시겠습니까?')) return;
    
    try {
      setIsLoading(true);
      
      const response = await fetch(`/api/admin/schedule?id=${eventId}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '일정 삭제에 실패했습니다');
      }
      
      // 데이터 새로고침
      await loadEvents();
    } catch (error) {
      console.error('일정 삭제 실패:', error);
      alert(error instanceof Error ? error.message : '일정 삭제에 실패했습니다');
    } finally {
      setIsLoading(false);
    }
  };

  const calendarDays = generateCalendarDays();

  // 예약 스케줄 동기화 함수
  const handleSyncReservationSchedules = async () => {
    if (!confirm('앞으로 3주간의 예약을 기반으로 조기/밤샘영업 스케줄을 동기화하시겠습니까?\n\n기존 자동생성 스케줄이 업데이트되고, 예약이 없는 스케줄은 삭제됩니다.')) {
      return;
    }
    
    try {
      setIsSyncingReservations(true);
      
      const response = await fetch('/api/admin/schedule/sync-reservations', {
        method: 'POST',
        credentials: 'include'
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '예약 스케줄 동기화에 실패했습니다');
      }
      
      const result = await response.json();
      alert(`예약 스케줄 동기화 완료!\n\n처리된 예약: ${result.result.processed}개\n정리된 날짜: ${result.result.cleaned}개\n오류: ${result.result.errors}개\n기간: ${result.result.dateRange}`);
      
      // 데이터 새로고침
      await loadEvents();
    } catch (error) {
      console.error('예약 스케줄 동기화 실패:', error);
      alert(error instanceof Error ? error.message : '예약 스케줄 동기화에 실패했습니다');
    } finally {
      setIsSyncingReservations(false);
    }
  };

  // 주말 밤샘영업 자동 생성 함수
  const handleGenerateWeekendSchedules = async () => {
    if (!confirm('향후 3주간의 주말 밤샘영업 일정을 자동으로 생성하시겠습니까?\n\n금요일, 토요일 밤샘영업이 생성됩니다.')) {
      return;
    }
    
    try {
      setIsGeneratingWeekend(true);
      
      const response = await fetch('/api/v2/admin/schedule/generate-weekend', {
        method: 'POST',
        credentials: 'include'
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '주말 밤샘영업 생성에 실패했습니다');
      }
      
      const result = await response.json();
      alert(`주말 밤샘영업 생성 완료!\n\n생성: ${result.result.created}개\n이미 존재: ${result.result.skipped}개`);
      
      // 데이터 새로고침
      await loadEvents();
    } catch (error) {
      console.error('주말 밤샘영업 생성 실패:', error);
      alert(error instanceof Error ? error.message : '주말 밤샘영업 생성에 실패했습니다');
    } finally {
      setIsGeneratingWeekend(false);
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* 헤더 */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold dark:text-white mb-2">운영 일정 관리</h1>
        <p className="text-sm text-gray-600 dark:text-gray-400">
          특별 운영 시간, 밤샘 영업, 조기 마감, 이벤트 등을 관리합니다
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 캘린더 */}
        <div className="lg:col-span-2">
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6">
            {/* 캘린더 헤더 */}
            <div className="flex items-center justify-between mb-6">
              <button
                onClick={() => {
                  const newMonth = new Date(selectedMonth);
                  newMonth.setMonth(newMonth.getMonth() - 1);
                  setSelectedMonth(newMonth);
                }}
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
              >
                <ChevronLeft className="w-5 h-5 text-gray-700 dark:text-gray-300" />
              </button>
              
              <h2 className="text-lg font-semibold dark:text-white">
                {selectedMonth.toLocaleDateString('ko-KR', { year: 'numeric', month: 'long' })}
              </h2>
              
              <button
                onClick={() => {
                  const newMonth = new Date(selectedMonth);
                  newMonth.setMonth(newMonth.getMonth() + 1);
                  setSelectedMonth(newMonth);
                }}
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
              >
                <ChevronRight className="w-5 h-5 text-gray-700 dark:text-gray-300" />
              </button>
            </div>

            {/* 요일 헤더 */}
            <div className="grid grid-cols-7 gap-1 mb-2">
              {['월', '화', '수', '목', '금', '토', '일'].map(day => (
                <div key={day} className="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">
                  {day}
                </div>
              ))}
            </div>

            {/* 날짜 그리드 */}
            {isLoading ? (
              <div className="flex justify-center items-center h-96">
                <Loader2 className="w-8 h-8 animate-spin text-gray-400" />
              </div>
            ) : (
            <div className="grid grid-cols-7 gap-1">
              {calendarDays.map((date, index) => {
                const dateStr = formatDate(date);
                const dayEvents = dateStr ? getEventsForDate(dateStr) : [];
                const holiday = dateStr ? getHolidayForDate(dateStr) : null;
                const isCurrentMonth = date.getMonth() === selectedMonth.getMonth();
                const isToday = formatDate(new Date()) === dateStr;
                const dayOfWeek = date.getDay();
                const isSunday = dayOfWeek === 0;
                const isSaturday = dayOfWeek === 6;
                
                // 날짜 색상 결정 (글씨만 빨간색)
                let dateColor = '';
                if (holiday?.is_red_day) {
                  // 공휴일
                  if (holiday.type === 'temporary') {
                    dateColor = 'text-orange-600 font-bold'; // 임시공휴일
                  } else {
                    dateColor = 'text-red-600 font-bold'; // 공식 공휴일
                  }
                } else if (isSunday) {
                  dateColor = 'text-red-600'; // 일요일
                } else if (isSaturday) {
                  dateColor = 'text-blue-600'; // 토요일
                }
                
                return (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: index * 0.01 }}
                    className={`min-h-[80px] p-2 border rounded-lg cursor-pointer transition-colors ${
                      isCurrentMonth
                        ? 'bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800'
                        : 'bg-gray-50 dark:bg-gray-950 border-gray-100 dark:border-gray-800 text-gray-400 dark:text-gray-600'
                    } ${isToday ? 'ring-2 ring-blue-500' : ''}`}
                    onClick={() => {
                      if (isCurrentMonth && dateStr) {
                        // 이벤트가 있으면 해당 날짜의 모든 이벤트 목록을 보여주고,
                        // 없으면 새 일정 추가 모달을 연다
                        if (dayEvents.length > 0) {
                          setSelectedDate(dateStr);
                          setShowDateEventsModal(true);
                        } else {
                          setSelectedDate(dateStr);
                          setIsAddingEvent(true);
                        }
                      }
                    }}
                    title={holiday ? holiday.name : ''}
                  >
                    <div className={`text-sm font-medium mb-1 ${isCurrentMonth ? dateColor : ''}`}>
                      {date.getDate()}
                      {holiday && (
                        <span className="ml-1 text-xs">
                          {holiday.type === 'temporary' && '🟠'}
                        </span>
                      )}
                    </div>
                    <div className="space-y-1">
                      {dayEvents.slice(0, 2).map(event => {
                        const config = eventTypeConfig[event.type];
                        const Icon = config.icon;
                        return (
                          <div
                            key={event.id}
                            className={`text-xs px-1 py-0.5 rounded flex items-center gap-1 ${config.color} cursor-pointer`}
                            onClick={(e) => {
                              e.stopPropagation();
                              setSelectedDate(event.date);
                              setShowDateEventsModal(true);
                            }}
                          >
                            <Icon className="w-3 h-3" />
                            <span className="truncate">
                              {event.title}
                              </span>
                          </div>
                        );
                      })}
                      {dayEvents.length > 2 && (
                        <div className="text-xs text-gray-500 dark:text-gray-500">
                          +{dayEvents.length - 2}개
                        </div>
                      )}
                    </div>
                  </motion.div>
                );
              })}
            </div>
            )}
          </div>
        </div>

        {/* 이벤트 목록 및 추가 */}
        <div className="space-y-6">
          {/* 이벤트 추가 버튼들 */}
          <div className="space-y-3">
            <button
              onClick={() => setIsAddingEvent(true)}
              className="w-full py-4 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl hover:border-gray-400 dark:hover:border-gray-500 transition-colors flex items-center justify-center gap-2 text-gray-600 dark:text-gray-400"
            >
              <Plus className="w-5 h-5" />
              <span>새 일정 추가</span>
            </button>
            
            <button
              onClick={syncHolidays}
              disabled={isSyncingHolidays}
              className="w-full py-4 bg-red-600 hover:bg-red-700 disabled:bg-red-400 text-white rounded-xl transition-colors flex items-center justify-center gap-2 font-medium"
            >
              {isSyncingHolidays ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>동기화 중...</span>
                </>
              ) : (
                <>
                  <Calendar className="w-5 h-5" />
                  <span>공휴일 동기화</span>
                </>
              )}
            </button>
            
            <button
              onClick={handleGenerateWeekendSchedules}
              disabled={isGeneratingWeekend}
              className="w-full py-4 bg-purple-600 hover:bg-purple-700 disabled:bg-purple-400 text-white rounded-xl transition-colors flex items-center justify-center gap-2 font-medium"
            >
              {isGeneratingWeekend ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>생성 중...</span>
                </>
              ) : (
                <>
                  <CalendarPlus className="w-5 h-5" />
                  <span>주말 밤샘영업 3주치 생성</span>
                </>
              )}
            </button>
            
            <button
              onClick={handleSyncReservationSchedules}
              disabled={isSyncingReservations}
              className="w-full py-4 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-xl transition-colors flex items-center justify-center gap-2 font-medium"
            >
              {isSyncingReservations ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>동기화 중...</span>
                </>
              ) : (
                <>
                  <RefreshCw className="w-5 h-5" />
                  <span>예약 스케줄 동기화</span>
                </>
              )}
            </button>
          </div>

          {/* 공휴일 동기화 상태 */}
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4">
            <h3 className="font-medium dark:text-white mb-3">공휴일 정보</h3>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-red-600 rounded-full"></div>
                <span className="text-sm text-gray-600 dark:text-gray-400">공식 공휴일</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-orange-600 rounded-full"></div>
                <span className="text-sm text-gray-600 dark:text-gray-400">임시 공휴일</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 border-2 border-red-600 border-dashed rounded-full"></div>
                <span className="text-sm text-gray-600 dark:text-gray-400">대체 공휴일</span>
              </div>
              {lastSyncTime && (
                <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                  <p className="text-xs text-gray-500 dark:text-gray-500">
                    마지막 동기화: {lastSyncTime.toLocaleString('ko-KR')}
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* 이벤트 타입별 범례 */}
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4">
            <h3 className="font-medium dark:text-white mb-3">일정 유형</h3>
            <div className="space-y-2">
              {Object.entries(eventTypeConfig).map(([type, config]) => {
                const Icon = config.icon;
                return (
                  <div key={type} className="flex items-center gap-3">
                    <div className={`p-1.5 rounded ${config.color}`}>
                      <Icon className="w-4 h-4" />
                    </div>
                    <span className="text-sm text-gray-600 dark:text-gray-400">{config.label}</span>
                  </div>
                );
              })}
            </div>
          </div>

          {/* 이번 달 일정 요약 */}
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4">
            <h3 className="font-medium dark:text-white mb-3">이번 달 일정</h3>
            <div className="space-y-2 max-h-64 overflow-y-auto">
              {events
                .filter(event => {
                  const eventDate = new Date(event.date);
                  return eventDate.getMonth() === selectedMonth.getMonth() &&
                         eventDate.getFullYear() === selectedMonth.getFullYear();
                })
                .sort((a, b) => a.date.localeCompare(b.date))
                .map(event => {
                  const config = eventTypeConfig[event.type];
                  const Icon = config.icon;
                  return (
                    <div
                      key={event.id}
                      className="flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer"
                      onClick={() => setEditingEvent(event)}
                    >
                      <div className="flex items-center gap-2">
                        <Icon className={`w-4 h-4 ${config.color.split(' ')[0]}`} />
                        <div>
                          <div className="text-sm font-medium dark:text-white">
                            {new Date(event.date).getDate()}일
                            {event.endDate && ` ~ ${new Date(event.endDate).getDate()}일`}
                            {' - '}{event.title}
                          </div>
                          {event.type === 'reservation_block' && event.blockType && (
                            <div className="text-xs text-gray-500 dark:text-gray-500">
                              {event.blockType === 'early' && '조기 대여 제한'}
                              {event.blockType === 'overnight' && '밤샘 대여 제한'}
                              {event.blockType === 'all_day' && '종일 예약 제한'}
                            </div>
                          )}
                          {event.startTime && event.type !== 'reservation_block' && (
                            <div className="text-xs text-gray-500 dark:text-gray-500">
                              {event.type === 'early_open' ? 
                                event.startTime.slice(0, 5) : 
                                `${event.startTime.slice(0, 5)} ~ ${event.endTime?.slice(0, 5)}`
                              }
                            </div>
                          )}
                        </div>
                      </div>
                      <ChevronRight className="w-4 h-4 text-gray-400" />
                    </div>
                  );
                })}
            </div>
          </div>
        </div>
      </div>

      {/* 일정 추가/수정 모달 */}
      <AnimatePresence>
      {(isAddingEvent || editingEvent) && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }} 
          className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
          onClick={() => {
            setIsAddingEvent(false);
            setEditingEvent(null);
            setSelectedDate(null);
          }}
        >
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <h2 className="text-xl font-semibold dark:text-white mb-6">
              {editingEvent ? '일정 수정' : '새 일정 추가'}
            </h2>
            
            <EventForm
              event={editingEvent || { date: selectedDate || formatDate(new Date()) || '' }}
              onSave={handleSaveEvent}
              onCancel={() => {
                setIsAddingEvent(false);
                setEditingEvent(null);
                setSelectedDate(null);
              }}
              onDelete={editingEvent ? (eventId: string) => {
                handleDeleteEvent(eventId);
                setEditingEvent(null);
              } : undefined}
            />
          </motion.div>
        </motion.div>
      )}
      </AnimatePresence>

      {/* 날짜별 이벤트 목록 모달 */}
      <AnimatePresence>
        {showDateEventsModal && selectedDate && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
            onClick={() => setShowDateEventsModal(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-white dark:bg-gray-900 rounded-2xl shadow-2xl max-w-md w-full max-h-[80vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="sticky top-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 p-6 rounded-t-2xl">
                <div className="flex items-center justify-between">
                  <h2 className="text-xl font-semibold dark:text-white">
                    {new Date(selectedDate + 'T00:00:00').toLocaleDateString('ko-KR', { 
                      month: 'long', 
                      day: 'numeric' 
                    })} 일정
                  </h2>
                  <button
                    onClick={() => setShowDateEventsModal(false)}
                    className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                  >
                    <X className="w-5 h-5 text-gray-700 dark:text-gray-300" />
                  </button>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  총 {events.filter(e => e.date === selectedDate).length}개의 일정이 있습니다
                </p>
              </div>
              
              <div className="p-6">
                {events.filter(e => e.date === selectedDate).length === 0 ? (
                  <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                    선택한 날짜에 일정이 없습니다
                  </div>
                ) : (
                  <div className="space-y-3">
                    {events
                      .filter(e => e.date === selectedDate)
                      .map((event) => {
                        const config = eventTypeConfig[event.type];
                        const Icon = config.icon;
                        
                        return (
                          <button
                            key={event.id}
                            onClick={() => {
                              setShowDateEventsModal(false);
                              setEditingEvent(event);
                            }}
                            className={`w-full p-4 rounded-xl border ${config.borderColor} ${config.color} hover:shadow-md transition-all text-left group`}
                          >
                            <div className="flex items-start justify-between gap-3">
                              <div className="flex items-start gap-3">
                                <div className="mt-1">
                                  <Icon className="w-5 h-5" />
                                </div>
                                <div className="flex-1">
                                  <h3 className="font-medium text-gray-900 dark:text-white mb-1">
                                    {event.title || config.label}
                                    {event.isAutoGenerated && (
                                      <span className="ml-2 text-xs px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-full">
                                        자동생성
                                      </span>
                                    )}
                                  </h3>
                                  {event.description && (
                                    <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
                                      {event.description}
                                    </p>
                                  )}
                                  {event.startTime && (
                                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                      {event.type === 'early_open' ? 
                                        formatTime24Hour(event.startTime) : 
                                        `${formatTime24Hour(event.startTime)} ~ ${formatTime24Hour(event.endTime || '')}`
                                      }
                                    </p>
                                  )}
                                  {event.type === 'reservation_block' && event.blockType && (
                                    <p className="text-sm font-medium mt-1">
                                      {event.blockType === 'early' && '조기 대여 제한'}
                                      {event.blockType === 'overnight' && '밤샘 대여 제한'}
                                      {event.blockType === 'all_day' && '종일 예약 제한'}
                                    </p>
                                  )}
                                </div>
                              </div>
                              <ChevronRight className="w-5 h-5 text-gray-400 dark:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity" />
                            </div>
                          </button>
                        );
                      })}
                  </div>
                )}
                
                <button
                  onClick={() => {
                    setShowDateEventsModal(false);
                    setIsAddingEvent(true);
                  }}
                  className="w-full mt-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-medium flex items-center justify-center gap-2"
                >
                  <Plus className="w-5 h-5" />
                  새 일정 추가
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>


      {/* 안내 메시지 */}
      <div className="mt-6 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4">
        <div className="flex items-start gap-3">
          <AlertCircle className="w-5 h-5 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5" />
          <div>
            <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-1">
              운영 일정 관리 안내
            </h4>
            <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
              <li>• '예약 영향' 옵션을 체크하면 해당 날짜의 예약이 제한됩니다</li>
              <li>• 특별 운영 시간은 일반 운영 시간을 덮어씁니다</li>
              <li>• 밤샘 영업은 다음날 새벽까지 운영 시간을 연장합니다</li>
              <li>• 조기 마감은 영업 시간을 단축합니다</li>
              <li>• 주말 밤샘영업 자동 생성: 금요일, 토요일 밤 → 29시(05:00)까지 영업</li>
              <li>• 예약 스케줄 동기화: 승인된 예약을 기반으로 조기/밤샘영업 자동 생성/삭제</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}

// 이벤트 폼 컴포넌트
function EventForm({ 
  event, 
  onSave, 
  onCancel,
  onDelete
}: {
  event: Partial<ScheduleEvent> & { date: string };
  onSave: (event: Partial<ScheduleEvent>) => void;
  onCancel: () => void;
  onDelete?: (eventId: string) => void;
}) {
  // 타입별로 시간을 초기화 (수정 시에도 유지)
  const getInitialTimes = () => {
    if (event.id) {
      // 수정 모드일 때는 기존 값 유지
      return {
        startTime: event.startTime || '',
        endTime: event.endTime || ''
      };
    }
    // 새로 생성할 때만 초기화
    switch (event.type) {
      case 'early_open':
        return { startTime: '', endTime: '' };
      case 'early_close':
        return { startTime: '', endTime: '' };
      case 'overnight':
        return { startTime: '', endTime: '' };
      default:
        return { startTime: '', endTime: '' };
    }
  };

  const initialTimes = getInitialTimes();
  
  const [formData, setFormData] = useState({
    date: event.date || '',
    endDate: event.endDate || '',
    type: event.type || 'early_open',
    title: event.title || '',
    description: event.description || '',
    startTime: initialTimes.startTime,
    endTime: initialTimes.endTime,
    affectsReservation: event.affectsReservation ?? (event.type === 'reservation_block'),
    blockType: event.blockType || 'all_day'
  });
  const [isPeriod, setIsPeriod] = useState(!!event.endDate);
  const [isAllDay, setIsAllDay] = useState(!event.startTime && !event.endTime);
  const [blockOptions, setBlockOptions] = useState({
    early: event.blockType === 'early' || event.blockType === 'all_day',
    overnight: event.blockType === 'overnight' || event.blockType === 'all_day'
  });

  // 조기/밤샘 둘 다 선택시 자동으로 종일 선택
  useEffect(() => {
    if (formData.type === 'reservation_block') {
      if (blockOptions.early && blockOptions.overnight) {
        setFormData({ ...formData, blockType: 'all_day', affectsReservation: true });
      } else if (blockOptions.early) {
        setFormData({ ...formData, blockType: 'early', affectsReservation: true });
      } else if (blockOptions.overnight) {
        setFormData({ ...formData, blockType: 'overnight', affectsReservation: true });
      }
    }
  }, [blockOptions, formData.type]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const dataToSave: any = { ...formData };
    if (!isPeriod) {
      delete dataToSave.endDate;
    }
    // 예약 제한은 무조건 예약에 영향
    if (dataToSave.type === 'reservation_block') {
      dataToSave.affectsReservation = true;
    }
    onSave(dataToSave);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          날짜
        </label>
        <div className="space-y-2">
          <input
            type="date"
            value={formData.date}
            onChange={(e) => setFormData({ ...formData, date: e.target.value })}
            className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={isPeriod}
              onChange={(e) => {
                setIsPeriod(e.target.checked);
                if (!e.target.checked) {
                  setFormData({ ...formData, endDate: '' });
                }
              }}
              className="text-blue-600 rounded focus:ring-blue-500"
            />
            <span className="text-sm text-gray-700 dark:text-gray-300">기간 설정</span>
          </label>
          {isPeriod && (
            <input
              type="date"
              value={formData.endDate}
              onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}
              min={formData.date}
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="종료 날짜"
              required
            />
          )}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          일정 유형
        </label>
        <select
          value={formData.type}
          onChange={(e) => {
            const newType = e.target.value as ScheduleEvent['type'];
            setFormData({ 
              ...formData, 
              type: newType,
              affectsReservation: newType === 'reservation_block'
            });
          }}
          className={`w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
            event.id ? 'opacity-60 cursor-not-allowed' : ''
          }`}
          disabled={!!event.id}
        >
          {Object.entries(eventTypeConfig).map(([type, config]) => (
            <option key={type} value={type}>{config.label}</option>
          ))}
        </select>
        {event.id && (
          <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
            * 수정 시 일정 유형은 변경할 수 없습니다
          </p>
        )}
      </div>

      {formData.type === 'event' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            이벤트 제목
          </label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => setFormData({ ...formData, title: e.target.value })}
            className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="예: 신규 기기 오픈 이벤트"
            required={formData.type === 'event'}
          />
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          설명 (선택)
        </label>
        <textarea
          value={formData.description}
          onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          rows={3}
          placeholder="예: 기기 점검으로 인한 조기 마감"
        />
      </div>

      {formData.type === 'reservation_block' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            예약 제한 범위
          </label>
          <div className="space-y-2">
            <label className="flex items-center gap-3 p-3 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800">
              <input
                type="checkbox"
                checked={blockOptions.early}
                onChange={(e) => setBlockOptions({ ...blockOptions, early: e.target.checked })}
                className="text-blue-600 rounded focus:ring-blue-500"
              />
              <span className="text-sm font-medium dark:text-white">조기 대여 제한</span>
            </label>
            <label className="flex items-center gap-3 p-3 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800">
              <input
                type="checkbox"
                checked={blockOptions.overnight}
                onChange={(e) => setBlockOptions({ ...blockOptions, overnight: e.target.checked })}
                className="text-blue-600 rounded focus:ring-blue-500"
              />
              <span className="text-sm font-medium dark:text-white">밤샘 대여 제한</span>
            </label>
            {blockOptions.early && blockOptions.overnight && (
              <div className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                <p className="text-sm text-red-700 dark:text-red-300">
                  ⚠️ 조기와 밤샘 모두 제한시 종일 예약이 차단됩니다
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* 특별 운영, 이벤트 - 종일 옵션과 시작/종료 시간 */}
      {(formData.type === 'special' || formData.type === 'event') && (
        <div>
          <label className="flex items-center gap-2 mb-3">
            <input
              type="checkbox"
              checked={isAllDay}
              onChange={(e) => {
                setIsAllDay(e.target.checked);
                if (e.target.checked) {
                  setFormData({ ...formData, startTime: '', endTime: '' });
                }
              }}
              className="text-blue-600 rounded focus:ring-blue-500"
            />
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">종일</span>
          </label>
          {!isAllDay && (
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  시작 시간
                </label>
                <input
                  type="time"
                  value={formData.startTime}
                  onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}
                  step="3600"
                  className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  종료 시간
                </label>
                <input
                  type="time"
                  value={formData.endTime}
                  onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}
                  step="3600"
                  className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>
          )}
        </div>
      )}

      {/* 조기 영업 - 시작 시간만 */}
      {formData.type === 'early_open' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
            오픈 시간
          </label>
          <div className="grid grid-cols-3 gap-2">
            {[7, 8, 9, 10, 11, 12].map((hour) => (
              <button
                key={hour}
                type="button"
                onClick={() => setFormData({ ...formData, startTime: `${hour.toString().padStart(2, '0')}:00` })}
                className={`py-2 px-4 rounded-lg font-medium transition-colors ${
                  formData.startTime === `${hour.toString().padStart(2, '0')}:00` || 
                  formData.startTime === `${hour.toString().padStart(2, '0')}:00:00`
                    ? 'bg-blue-600 text-white hover:bg-blue-700'
                    : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
                }`}
              >
                {hour}시
              </button>
            ))}
          </div>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
            평소보다 일찍 영업을 시작하는 시간
          </p>
        </div>
      )}

      {/* 조기 마감 - 종료 시간만 */}
      {formData.type === 'early_close' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
            마감 시간
          </label>
          <div className="grid grid-cols-3 gap-2">
            {[21, 22, 23].map((hour) => (
              <button
                key={hour}
                type="button"
                onClick={() => setFormData({ ...formData, endTime: `${hour}:00` })}
                className={`py-2 px-4 rounded-lg font-medium transition-colors ${
                  formData.endTime === `${hour}:00` ||
                  formData.endTime === `${hour}:00:00`
                    ? 'bg-orange-600 text-white hover:bg-orange-700'
                    : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
                }`}
              >
                {hour}시
              </button>
            ))}
          </div>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
            평소보다 일찍 영업을 종료하는 시간
          </p>
        </div>
      )}

      {/* 밤샘 영업 - 종료 시간만 */}
      {formData.type === 'overnight' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
            종료 시간 (다음날 새벽)
          </label>
          <div className="grid grid-cols-2 gap-2">
            <button
              type="button"
              onClick={() => setFormData({ ...formData, endTime: '04:00' })}
              className={`py-3 px-4 rounded-lg font-medium transition-colors ${
                formData.endTime === '04:00' || formData.endTime === '04:00:00'
                  ? 'bg-purple-600 text-white hover:bg-purple-700'
                  : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
              }`}
            >
              28시<br/>
              <span className="text-xs opacity-75">(새벽 4시)</span>
            </button>
            <button
              type="button"
              onClick={() => setFormData({ ...formData, endTime: '05:00' })}
              className={`py-3 px-4 rounded-lg font-medium transition-colors ${
                formData.endTime === '05:00' || formData.endTime === '05:00:00'
                  ? 'bg-purple-600 text-white hover:bg-purple-700'
                  : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
              }`}
            >
              29시<br/>
              <span className="text-xs opacity-75">(새벽 5시)</span>
            </button>
          </div>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
            다음날 새벽까지 운영하는 종료 시간
          </p>
        </div>
      )}


      <div className="space-y-3">
        <div className="flex gap-3">
          <button
            type="button"
            onClick={onCancel}
            className="flex-1 py-2 border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
          >
            취소
          </button>
          <button
            type="submit"
            className="flex-1 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
          >
            저장
          </button>
        </div>
        {onDelete && event.id && (
          <button
            type="button"
            onClick={() => onDelete(event.id!)}
            className="w-full py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors flex items-center justify-center gap-2"
          >
            <Trash2 className="w-4 h-4" />
            삭제
          </button>
        )}
      </div>
    </form>
  );
}