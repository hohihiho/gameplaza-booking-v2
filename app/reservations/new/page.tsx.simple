// 간소화된 예약 신청 페이지
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Clock, Gamepad2, ChevronLeft, Loader2, AlertCircle } from 'lucide-react';
import { createReservation } from '@/lib/api/reservations';
import { useSession } from 'next-auth/react';

export default function SimpleNewReservationPage() {
  const router = useRouter();
  const { data: session, status } = useSession();
  
  // 상태 관리
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedMachine, setSelectedMachine] = useState('');
  const [selectedTime, setSelectedTime] = useState<{ start: string; end: string }>({ start: '', end: '' });
  const [playerCount, setPlayerCount] = useState(1);
  
  const [machines, setMachines] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // 로그인 확인
  useEffect(() => {
    if (status === 'loading') return;
    if (!session?.user) {
      router.push('/login');
    }
  }, [status, session, router]);
  
  // 기기 목록 불러오기
  useEffect(() => {
    const loadMachines = async () => {
      if (!selectedDate) return;
      
      try {
        setIsLoading(true);
        const response = await fetch(`/api/available-machines?date=${selectedDate}`);
        const data = await response.json();
        
        if (response.ok) {
          setMachines(data.machines || []);
        } else {
          setError(data.error || '기기 정보를 불러올 수 없습니다');
        }
      } catch (error) {
        setError('기기 정보를 불러올 수 없습니다');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadMachines();
  }, [selectedDate]);
  
  // 예약 제출
  const handleSubmit = async () => {
    if (!session?.user) {
      setError('로그인이 필요합니다');
      router.push('/login');
      return;
    }
    
    if (!selectedDate || !selectedMachine || !selectedTime.start || !selectedTime.end) {
      setError('모든 정보를 선택해주세요');
      return;
    }
    
    try {
      setIsSubmitting(true);
      setError(null);
      
      // 선택한 기기 정보
      const machine = machines.find(m => m.id === selectedMachine);
      if (!machine) {
        throw new Error('선택한 기기를 찾을 수 없습니다');
      }
      
      // 시간 계산
      if (!selectedTime.start || !selectedTime.end) {
        throw new Error('시간을 선택해주세요');
      }
      
      const startParts = selectedTime.start.split(':');
      const endParts = selectedTime.end.split(':');
      const startHour = parseInt(startParts[0] || '0');
      const endHour = parseInt(endParts[0] || '0');
      const hours = endHour - startHour;
      
      const { reservation } = await createReservation({
        date: selectedDate,
        startTime: selectedTime.start,
        endTime: selectedTime.end,
        deviceTypeId: machine.machines?.type || 'other',
        deviceId: machine.id,
        playerCount,
        hourlyRate: machine.hourly_rate,
        totalAmount: machine.hourly_rate * hours * playerCount
      });
      
      // 예약 완료 페이지로 이동
      router.push(`/reservations/complete?id=${reservation.id}`);
    } catch (error: any) {
      setError(error.message || '예약 신청에 실패했습니다');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // 날짜 선택을 위한 달력 데이터 생성 (3주 후 일요일까지)
  const generateCalendarDays = () => {
    const today = new Date();
    const days = [];
    
    // 3주 후 찾기
    const threeWeeksLater = new Date(today);
    threeWeeksLater.setDate(today.getDate() + 21);
    
    // 해당 주의 일요일 찾기
    const daysUntilSunday = threeWeeksLater.getDay() === 0 ? 0 : 7 - threeWeeksLater.getDay();
    const lastSunday = new Date(threeWeeksLater);
    lastSunday.setDate(threeWeeksLater.getDate() + daysUntilSunday);
    
    // 오늘부터 마지막 일요일까지의 날짜 생성
    const totalDays = Math.ceil((lastSunday.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)) + 1;
    
    for (let i = 0; i < totalDays; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      days.push(date);
    }
    
    return days;
  };
  
  const calendarDays = generateCalendarDays();
  
  if (status === 'loading') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-gray-600" />
      </div>
    );
  }
  
  return (
    <main className="min-h-screen bg-gray-50 dark:bg-gray-950">
      <div className="max-w-lg mx-auto px-5 py-6">
        {/* 헤더 */}
        <div className="mb-6 flex items-center gap-4">
          <button
            onClick={() => router.back()}
            className="p-2 -ml-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg"
          >
            <ChevronLeft className="w-5 h-5" />
          </button>
          <h1 className="text-2xl font-bold">예약하기</h1>
        </div>
        
        {/* 에러 메시지 */}
        {error && (
          <div className="mb-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
            <p className="text-sm text-red-600 dark:text-red-400 flex items-center gap-2">
              <AlertCircle className="w-4 h-4" />
              {error}
            </p>
          </div>
        )}
        
        {/* 1. 날짜 선택 */}
        <div className="mb-6 bg-white dark:bg-gray-900 rounded-2xl p-6">
          <h2 className="text-lg font-semibold mb-6 dark:text-white">날짜 선택</h2>
          
          {/* 요일 헤더 - 월요일부터 시작 */}
          <div className="grid grid-cols-7 gap-1 mb-2">
            {['월', '화', '수', '목', '금', '토', '일'].map((day, index) => (
              <div key={day} className={`text-center text-xs font-medium py-2 ${
                index === 6 ? 'text-red-500' : index === 5 ? 'text-blue-500' : 'text-gray-600 dark:text-gray-400'
              }`}>
                {day}
              </div>
            ))}
          </div>
          
          {/* 날짜 그리드 */}
          <div className="grid grid-cols-7 gap-1">
            {/* 첫 주 빈 칸 채우기 - 월요일 시작 기준 */}
            {calendarDays[0] && Array.from({ length: calendarDays[0].getDay() === 0 ? 6 : calendarDays[0].getDay() - 1 }, (_, i) => (
              <div key={`empty-${i}`} />
            ))}
            
            {/* 날짜 버튼들 */}
            {calendarDays.map((date) => {
              const dateParts = date.toISOString().split('T');
              const dateStr = dateParts[0] || '';
              const isSelected = selectedDate === dateStr;
              const now = new Date();
              const isToday = now.toDateString() === date.toDateString();
              const dayOfWeek = date.getDay();
              
              // 24시간 이내 날짜인지 확인
              const tomorrow = new Date(now);
              tomorrow.setDate(tomorrow.getDate() + 1);
              tomorrow.setHours(0, 0, 0, 0);
              const isDisabled = date < tomorrow;
              
              return (
                <button
                  key={dateStr}
                  onClick={() => {
                    if (dateStr && !isDisabled) {
                      setSelectedDate(dateStr);
                      setSelectedMachine('');
                      setSelectedTime({ start: '', end: '' });
                    }
                  }}
                  disabled={isDisabled}
                  className={`aspect-square p-2 rounded-lg border transition-all ${
                    isDisabled
                      ? 'border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 cursor-not-allowed opacity-50'
                      : isSelected
                        ? 'border-gray-900 dark:border-white bg-gray-900 dark:bg-white text-white dark:text-gray-900'
                        : isToday
                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                          : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <span className={`text-sm font-medium ${
                    isDisabled
                      ? 'text-gray-400 dark:text-gray-600'
                      : isSelected 
                        ? 'text-white dark:text-gray-900' 
                        : dayOfWeek === 0 
                          ? 'text-red-500' 
                          : dayOfWeek === 6 
                            ? 'text-blue-500' 
                            : 'text-gray-700 dark:text-gray-300'
                  }`}>
                    {date.getDate()}
                  </span>
                </button>
              );
            })}
          </div>
        </div>
        
        {/* 2. 기기 선택 */}
        {selectedDate && (
          <div className="mb-6">
            <h2 className="flex items-center gap-2 text-lg font-semibold mb-3">
              <Gamepad2 className="w-5 h-5" />
              기기 선택
            </h2>
            
            {isLoading ? (
              <div className="text-center py-8">
                <Loader2 className="w-6 h-6 animate-spin mx-auto mb-2" />
                <p className="text-sm text-gray-600">기기 정보를 불러오는 중...</p>
              </div>
            ) : (
              <div className="space-y-2">
                {machines.map((machine) => (
                  <button
                    key={machine.id}
                    onClick={() => {
                      setSelectedMachine(machine.id);
                      setSelectedTime({ start: '', end: '' });
                    }}
                    disabled={machine.available_slots.length === 0}
                    className={`w-full p-4 rounded-lg border-2 transition-all text-left ${
                      selectedMachine === machine.id
                        ? 'border-gray-900 bg-gray-50'
                        : 'border-gray-200 hover:border-gray-300'
                    } ${
                      machine.available_slots.length === 0
                        ? 'opacity-50 cursor-not-allowed'
                        : ''
                    }`}
                  >
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium">{machine.display_name}</h3>
                        <p className="text-sm text-gray-600 mt-1">
                          시간당 {machine.hourly_rate.toLocaleString()}원
                        </p>
                      </div>
                      {machine.max_players > 1 && (
                        <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
                          2P 가능
                        </span>
                      )}
                    </div>
                    {machine.available_slots.length === 0 && (
                      <p className="text-xs text-red-600 mt-2">예약 마감</p>
                    )}
                  </button>
                ))}
              </div>
            )}
          </div>
        )}
        
        {/* 3. 시간 선택 */}
        {selectedMachine && (
          <div className="mb-6">
            <h2 className="flex items-center gap-2 text-lg font-semibold mb-3">
              <Clock className="w-5 h-5" />
              시간 선택
            </h2>
            
            <div className="grid grid-cols-2 gap-2">
              {machines
                .find(m => m.id === selectedMachine)
                ?.available_slots.map((slot: any) => {
                  const isSelected = 
                    selectedTime.start === slot.start_time && 
                    selectedTime.end === slot.end_time;
                  
                  return (
                    <button
                      key={`${slot.start_time}-${slot.end_time}`}
                      onClick={() => setSelectedTime({
                        start: slot.start_time,
                        end: slot.end_time
                      })}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        isSelected
                          ? 'border-gray-900 bg-gray-900 text-white'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-sm font-medium">
                        {slot.start_time} - {slot.end_time}
                      </div>
                      <div className="text-xs mt-1 opacity-70">
                        {slot.price.toLocaleString()}원
                      </div>
                    </button>
                  );
                })}
            </div>
          </div>
        )}
        
        {/* 4. 인원 선택 */}
        {selectedTime.start && machines.find(m => m.id === selectedMachine)?.max_players > 1 && (
          <div className="mb-6">
            <h2 className="text-lg font-semibold mb-3">인원 선택</h2>
            <div className="flex gap-2">
              <button
                onClick={() => setPlayerCount(1)}
                className={`flex-1 p-3 rounded-lg border-2 transition-all ${
                  playerCount === 1
                    ? 'border-gray-900 bg-gray-900 text-white'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                1인 플레이
              </button>
              <button
                onClick={() => setPlayerCount(2)}
                className={`flex-1 p-3 rounded-lg border-2 transition-all ${
                  playerCount === 2
                    ? 'border-gray-900 bg-gray-900 text-white'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                2인 플레이
              </button>
            </div>
          </div>
        )}
        
        {/* 예약 버튼 */}
        <button
          onClick={handleSubmit}
          disabled={!selectedDate || !selectedMachine || !selectedTime.start || isSubmitting}
          className="w-full py-3 bg-gray-900 text-white rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-800 transition-colors"
        >
          {isSubmitting ? (
            <span className="flex items-center justify-center gap-2">
              <Loader2 className="w-4 h-4 animate-spin" />
              예약 처리 중...
            </span>
          ) : (
            '예약하기'
          )}
        </button>
      </div>
    </main>
  );
}